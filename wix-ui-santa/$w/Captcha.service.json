{ "name": "Captcha",
  "memberOf": "$w",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "filename": "Captcha.js",
      "lineno": 6 },
  "docs":
    { "summary": "Captcha allow users to present google captcha and verify its not a bot.",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "token",
        "labels":
          [ "changed",
            "removed" ],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 46 } ],
        "docs":
          { "summary": "Gets the captcha token.",
            "description":
              [ "When a site visitor successfully completes a captcha challenge, a captcha `token`",
                " is generated.",
                "",
                " Prior to completing the captcha challenge and following timeout, the token returns `undefined`." ],
            "links": [],
            "examples":
              [ { "title": "Get the token of the verified captcha",
                  "body":
                    [ "let myToken = $w(\"#myCaptcha\").token;",
                      "// \"01ABCDeFG23hijKlmn4...OPQ5r6stuvWXy\"" ],
                  "extra":
                    {  } },
                { "title": "Full captcha lifecycle scenario",
                  "body":
                    [ "/******************************",
                      " * backend code - captcha.jsw *",
                      " ******************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from 'wix-data';",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequest) {",
                      "  return wixCaptcha.authorize(submitRequest.token)",
                      "  .then (() => {",
                      "    wixData.insert(\"MyCollection\", submitRequest.data);",
                      "  })",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/captcha';",
                      "",
                      "// Error handler",
                      "$w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#myCaptcha\").reset();",
                      "    showText(\"Something went wrong. Redo the Captcha challenge.\");",
                      "})",
                      "",
                      "// Verification handler",
                      "$w(\"#myCaptcha\").onVerified(() => {",
                      "  $w(\"#submitDataButton\").enable();",
                      "})",
                      "",
                      "// Timeout handler",
                      "$w(\"#myCaptcha\").onTimeout(() => {",
                      "  $w(\"#submitDataButton\").disable();",
                      "  $w(\"#myCaptcha\").reset();",
                      "  showText(\"The captcha timed out. Redo the challenge.\");",
                      "})",
                      "",
                      "// When user clicks submit button",
                      "export function submitDataButton_click(event, $w) {",
                      "  let submitRequest = {",
                      "    token: $w(\"#myCaptcha\").token,",
                      "    data: $w(\"#myInput\").value,",
                      "  }",
                      "  processSubmission(submitRequest)",
                      "    .then( () => {",
                      "      $w(\"#myCaptcha\").reset();",
                      "      showText(\"Data successfully submitted.\");",
                      "    })",
                      "    .catch(() => {",
                      "      $w(\"#myCaptcha\").reset();",
                      "      showText(\"Something went wrong. Redo the Captcha challenge.\");",
                      "    })",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onError",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "cb",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the captcha errors." } ],
        "ret":
          { "type": "$w.captcha",
            "doc": "The captcha that triggered the event." },
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 26 } ],
        "docs":
          { "summary": "Adds an event handler that runs when Captcha component onError event is triggered.",
            "description":
              [ "The Captcha component may gat into error state (when not connected to the network) and this event will be triggered" ],
            "links":
              [ "[onError( )](#onError)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "onError" } },
      { "name": "onTimeout",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "cb",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the captcha timeout." } ],
        "ret":
          { "type": "$w.captcha",
            "doc": "The captcha that triggered the event." },
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 50 } ],
        "docs":
          { "summary": "Adds an event handler that runs when Captcha component timeout event is triggered.",
            "description":
              [ "Once The Captcha challenge has been completed by the user the given token has 120 sec life time, once 120 sec has passed",
                " without BE verification of the token onTimout event is triggered and the token expires." ],
            "links":
              [ "[onTimeout( )](#onTimeout)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "onTimeout" } },
      { "name": "onVerified",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "cb",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the captcha timeout." } ],
        "ret":
          { "type": "$w.captcha",
            "doc": "The captcha that triggered the event." },
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 77 } ],
        "docs":
          { "summary": "Adds an event handler that runs when Captcha component onVerified event is triggered.",
            "description":
              [ "Once The Captcha challenge has been completed by the user the onVerified callback is triggered with the token as parameter." ],
            "links":
              [ "[onVerified( )](#onVerified)" ],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "eventType": "onVerified" } },
      { "name": "reset",
        "labels":
          [ "changed",
            "removed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the captcha has been reset." },
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 64 } ],
        "docs":
          { "summary": "Resets the captcha challenge.",
            "description":
              [ "`reset()` is required when there is a captcha error, timeout, or when the action",
                "restricted by the captcha element was successfully completed." ],
            "links": [],
            "examples":
              [ { "title": "Reset the captcha element",
                  "body":
                    [ "$w(\"#myCaptcha\").reset();" ],
                  "extra":
                    {  } },
                { "title": "Full captcha lifecycle scenario",
                  "body":
                    [ "/******************************",
                      " * backend code - captcha.jsw *",
                      " ******************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from 'wix-data';",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequest) {",
                      "  return wixCaptcha.authorize(submitRequest.token)",
                      "  .then (() => {",
                      "    wixData.insert(\"MyCollection\", submitRequest.data);",
                      "  })",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/captcha';",
                      "",
                      "// Error handler",
                      "$w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#myCaptcha\").reset();",
                      "    showText(\"Something went wrong. Redo the Captcha challenge.\");",
                      "})",
                      "",
                      "// Verification handler",
                      "$w(\"#myCaptcha\").onVerified(() => {",
                      "  $w(\"#submitDataButton\").enable();",
                      "})",
                      "",
                      "// Timeout handler",
                      "$w(\"#myCaptcha\").onTimeout(() => {",
                      "  $w(\"#submitDataButton\").disable();",
                      "  $w(\"#myCaptcha\").reset();",
                      "  showText(\"The captcha timed out. Redo the challenge.\");",
                      "})",
                      "",
                      "// When user clicks submit button",
                      "export function submitDataButton_click(event, $w) {",
                      "  let submitRequest = {",
                      "    token: $w(\"#myCaptcha\").token,",
                      "    data: $w(\"#myInput\").value,",
                      "  }",
                      "  processSubmission(submitRequest)",
                      "    .then( () => {",
                      "      $w(\"#myCaptcha\").reset();",
                      "      showText(\"Data successfully submitted.\");",
                      "    })",
                      "    .catch(() => {",
                      "      $w(\"#myCaptcha\").reset();",
                      "      showText(\"Something went wrong. Redo the Captcha challenge.\");",
                      "    })",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks":
    [ { "name": "ErrorHandler",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 101 } ],
        "docs":
          { "summary": "An error event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "TimeoutHandler",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 145 } ],
        "docs":
          { "summary": "A timeout event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "VerificationHandler",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 192 } ],
        "docs":
          { "summary": "A verification event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "VerifiedHandler",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 193 } ],
        "docs":
          { "summary": "A verification event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "messages": [],
  "extra":
    {  } }