{ "name": "Captcha",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.FocusMixin" ],
  "labels": [],
  "location":
    { "lineno": 6,
      "filename": "Captcha.js" },
  "docs":
    { "summary": "The captcha element allows you to present a challenge-response test\n to site visitors to determine whether they are human or a bot.",
      "description":
        [ "Use the captcha element to verify that site visitors are human before",
          "allowing them to perform restricted operations such as data submission,",
          "login, or accessing private content.",
          "",
          " <h3 id=\"captcha-lifecycle\">Typical Captcha Validation Lifecycle</h3>",
          "",
          " The following outlines a typical captcha validation lifecycle:",
          "",
          " 1. A button or another clickable element that triggers a submit, login, or another restricted operation is disabled, pending captcha verification.",
          " 1. A site visitor completes the captcha challenge. One of the following occurs:",
          "     * Verification: Captcha is verified. A captcha [`token`]($w.Captcha.html#token) is generated. Use the [`onVerified()`]($w.Captcha.html#onVerified) event handler to enable the disabled clickable element.",
          "     * Error: Captcha fails verification. Use the [`onError()`]($w.Captcha.html#onError) event handler to [`reset()`]($w.Captcha.html#reset) the captcha and ask the visitor to redo the challenge. Return to Step 1.",
          " 1. The clickable element is enabled. One of the following occurs:",
          "     * Click: The site visitor clicks the clickable element, triggering a backend function that calls [`authorize()`](wix-captcha-backend.html#authorize) with the generated [`token`]($w.Captcha.html#token).",
          "     * Timeout: The site visitor did not click within 120 seconds of token generation, causing the token to expire. When timeout occurs, the captcha automatically resets and displays a message asking the site visitor to redo the challenge. Use the [`onTimeout()`]($w.Captcha.html#onTimeout) event handler to disable the clickable trigger. Return to Step 1.",
          " 1. [`authorize()`](wix-captcha-backend.html#authorize) checks whether the captcha token is valid. One of the following occurs:",
          "     * Authorization: Captcha is authorized. Perform the restricted operation (such as data insert) in the backend function. [`reset()`]($w.Captcha.html#reset) the captcha for future operations.",
          "     * Error: Token fails authorization. [`reset()`]($w.Captcha.html#reset) the captcha and ask the visitor to redo the challenge. Return to Step 1.",
          "",
          "Important: To ensure complete protection, you must include backend [authorization](wix-captcha-backend.html#authorize) as a mandatory step of the captcha validation lifecycle.",
          "",
          "",
          "For more information on working with your captcha element, click <a href=\"https://support.wix.com/en/article/corvid-tutorial-using-captcha-to-protect-data-submission\" target=\"_blank\">here</a>." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "token",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "lineno": 47,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Gets the captcha token.",
            "description":
              [ "When a site visitor successfully completes a captcha challenge, a captcha `token`",
                " is generated. The token is used for backend authorization.",
                "",
                " Prior to completing the captcha challenge and following timeout, the token returns `undefined`." ],
            "links": [],
            "examples":
              [ { "title": "Get the token of the verified captcha",
                  "body":
                    [ "let myToken = $w(\"#myCaptcha\").token;",
                      "// \"01ABCDeFG23hijKlmn4...OPQ5r6stuvWXy\"" ],
                  "extra":
                    {  } },
                { "title": "Full captcha lifecycle scenario",
                  "body":
                    [ "/************************************",
                      " * backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from 'wix-data';",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequestData) {",
                      "  return wixCaptcha.authorize(submitRequestData.token)",
                      "    .then (() => {",
                      "      return wixData.insert(\"MyCollection\", submitRequestData.data);",
                      "    });",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/submitHandler';",
                      "",
                      "$w.onReady(function () {",
                      "  // When user clicks submit button",
                      "  $w(\"#submitDataButton\").onClick(() =>",
                      "    let submitRequestData = {",
                      "      token: $w(\"#myCaptcha\").token,",
                      "      data: $w(\"#myInput\").value,",
                      "    }",
                      "    processSubmission(submitRequestData) // Call backend function",
                      "      .then( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Data successfully submitted\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "      .catch( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Something went wrong. Redo the captcha challenge.\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "  }",
                      "",
                      "  // Error handler",
                      "  $w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#messageText\").text = \"Something went wrong. Redo the captcha challenge.\";",
                      "    $w(\"#messageText\").show();",
                      "  })",
                      "",
                      "  // Verification handler",
                      "  $w(\"#myCaptcha\").onVerified(() => {",
                      "    $w(\"#submitDataButton\").enable();",
                      "    $w(\"#messageText\").hide();",
                      "  })",
                      "",
                      "  // Timeout handler",
                      "  $w(\"#myCaptcha\").onTimeout(() => {",
                      "    $w(\"#submitDataButton\").disable();",
                      "  })",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to use captcha to protect a data insertion.\n We use a text input for the data, a captcha element, and a submit button.\n The submit button is disabled until the site visitor completes the captcha\n challenge and the captcha is verified. Clicking the submit button triggers\n backend authorization of the token. If authorization is successful, the data\n is inserted into the collection." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onError",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.Captcha.ErrorHandler",
              "doc": "The name of the function or\n the function expression to run when an error occurs." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 116,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an error occurs while completing the captcha challenge.",
            "description":
              [ "The `onError()` function allows you to perform actions when the captcha element on the client side",
                "has a communication error with the captcha provider.",
                "",
                "If an error occurs, the captcha element automatically resets. You can",
                "ask the user to redo the challenge." ],
            "links": [],
            "examples":
              [ { "title": "Register a callback to run when an error occurs",
                  "body":
                    [ "$w(\"#myCaptcha\").onError(() => {",
                      "  $w(\"#messageText\").text = \"Something went wrong. Redo the captcha challenge.\";",
                      "  $w(\"#messageText\").show();",
                      "})" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onError" } },
      { "name": "onTimeout",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.Captcha.TimeoutHandler",
              "doc": "The name of the function or\n the function expression to run when a captcha timeout occurs." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 160,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the captcha token expires.",
            "description":
              [ "The `onTimeout()` function allows you to perform actions when a captcha timeout occurs.",
                "",
                "When a site visitor completes a captcha challenge, a [`token`]($w.Captcha.html#token) is",
                "generated. If 120 seconds pass without backend [authorization](wix-captcha-backend.html#authorize),",
                "the token expires and `onTimeout()` is called.",
                "",
                "When a timeout occurs, the captcha automatically resets and displays a",
                "message asking the site visitor to redo the challenge. If you enabled the",
                "clickable element for triggering a restricted operation when the captcha was verified, disable it." ],
            "links": [],
            "examples":
              [ { "title": "Register a callback to run when a timeout occurs",
                  "body":
                    [ "$w(\"#myCaptcha\").onTimeout(() => {",
                      "  $w(\"#signupButton\").disable();",
                      "})" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onTimeout" } },
      { "name": "onVerified",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.Captcha.VerifiedHandler",
              "doc": "The name of the function or\n the function expression to run when the captcha is verified." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 209,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the captcha challenge is successfully completed.",
            "description":
              [ "Once the captcha challenge has been successfully completed by the user, the `onVerified`",
                " callback is triggered and a captcha token is generated.",
                "",
                " If the clickable element for triggering the submit or another",
                " restricted operation was disabled, enable it." ],
            "links": [],
            "examples":
              [ { "title": "Register a callback to run when the captcha is verified",
                  "body":
                    [ "$w(\"#myCaptcha\").onVerified(() => {",
                      "  $w(\"#signupButton\").enable();",
                      "  let myToken = $w(\"#myCaptcha\").token;",
                      "})" ],
                  "extra":
                    {  } },
                { "title": "Full captcha lifecycle scenario",
                  "body":
                    [ "/************************************",
                      " * backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from 'wix-data';",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequestData) {",
                      "  return wixCaptcha.authorize(submitRequestData.token)",
                      "    .then (() => {",
                      "      return wixData.insert(\"MyCollection\", submitRequestData.data);",
                      "    });",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/submitHandler';",
                      "",
                      "$w.onReady(function () {",
                      "  // When user clicks submit button",
                      "  $w(\"#submitDataButton\").onClick(() =>",
                      "    let submitRequestData = {",
                      "      token: $w(\"#myCaptcha\").token,",
                      "      data: $w(\"#myInput\").value,",
                      "    }",
                      "    processSubmission(submitRequestData) // Call backend function",
                      "      .then( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Data successfully submitted\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "      .catch( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Something went wrong. Redo the captcha challenge.\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "  }",
                      "",
                      "  // Error handler",
                      "  $w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#messageText\").text = \"Something went wrong. Redo the captcha challenge.\";",
                      "    $w(\"#messageText\").show();",
                      "  })",
                      "",
                      "  // Verification handler",
                      "  $w(\"#myCaptcha\").onVerified(() => {",
                      "    $w(\"#submitDataButton\").enable();",
                      "    $w(\"#messageText\").hide();",
                      "  })",
                      "",
                      "  // Timeout handler",
                      "  $w(\"#myCaptcha\").onTimeout(() => {",
                      "    $w(\"#submitDataButton\").disable();",
                      "  })",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to use captcha to protect a data insertion.\n We use a text input for the data, a captcha element, and a submit button.\n The submit button is disabled until the site visitor completes the captcha\n challenge and the captcha is verified. Clicking the submit button triggers\n backend authorization of the token. If authorization is successful, the data\n is inserted into the collection." } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onVerified" } },
      { "name": "reset",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the captcha has been reset." },
        "locations":
          [ { "lineno": 71,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Resets the captcha challenge.",
            "description":
              [ "`reset()` the captcha when there is a captcha error. Also use `reset()`",
                "when the operation restricted by the captcha element is successfully completed",
                "to enable the captcha for the next operation." ],
            "links": [],
            "examples":
              [ { "title": "Reset the captcha element",
                  "body":
                    [ "$w(\"#myCaptcha\").reset();" ],
                  "extra":
                    {  } },
                { "title": "Full captcha lifecycle scenario",
                  "body":
                    [ "/************************************",
                      " * backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from 'wix-data';",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequestData) {",
                      "  return wixCaptcha.authorize(submitRequestData.token)",
                      "    .then (() => {",
                      "      return wixData.insert(\"MyCollection\", submitRequestData.data);",
                      "    });",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/submitHandler';",
                      "",
                      "$w.onReady(function () {",
                      "  // When user clicks submit button",
                      "  $w(\"#submitDataButton\").onClick(() =>",
                      "    let submitRequestData = {",
                      "      token: $w(\"#myCaptcha\").token,",
                      "      data: $w(\"#myInput\").value,",
                      "    }",
                      "    processSubmission(submitRequestData) // Call backend function",
                      "      .then( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Data successfully submitted\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "      .catch( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Something went wrong. Redo the captcha challenge.\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "  }",
                      "",
                      "  // Error handler",
                      "  $w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#messageText\").text = \"Something went wrong. Redo the captcha challenge.\";",
                      "    $w(\"#messageText\").show();",
                      "  })",
                      "",
                      "  // Verification handler",
                      "  $w(\"#myCaptcha\").onVerified(() => {",
                      "    $w(\"#submitDataButton\").enable();",
                      "    $w(\"#messageText\").hide();",
                      "  })",
                      "",
                      "  // Timeout handler",
                      "  $w(\"#myCaptcha\").onTimeout(() => {",
                      "    $w(\"#submitDataButton\").disable();",
                      "  })",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to use captcha to protect a data insertion.\n We use a text input for the data, a captcha element, and a submit button.\n The submit button is disabled until the site visitor completes the captcha\n challenge and the captcha is verified. Clicking the submit button triggers\n backend authorization of the token. If authorization is successful, the data\n is inserted into the collection." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks":
    [ { "name": "ErrorHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 109,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "An error event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "TimeoutHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 153,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "A timeout event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "VerificationHandler",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 192,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "A verification event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "VerifiedHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Void" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 201,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "A verification event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "messages": [],
  "extra":
    { "notes":
        [ "The captcha element does not offer protection for data submission performed via a dataset. To protect data submission with captcha, use code to perform the data operation (for example, [`insert()`](wix-data.html#insert) or [`save()`](wix-data.html#save))." ] } }