{ "name": "Captcha",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.FocusMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "filename": "Captcha.js",
      "lineno": 6 },
  "docs":
    { "summary": "The captcha element allows you to present a challenge-response test\n to site visitors to determine whether they are human or a bot.",
      "description":
        [ "Use the captcha element to verify that site visitors are human before",
          "allowing them to perform restricted operations.",
          "",
          " <h3 id=\"captcha-lifecycle\">Typical Captcha Validation Lifecycle</h3>",
          "",
          " The following outlines a typical captcha validation lifecycle:",
          "",
          " 1. A clickable element that triggers a submit, login, or another restricted operation is disabled, pending captcha verification.",
          " 1. A site visitor completes the captcha challenge. One of the following occurs:",
          "     * Error: Captcha fails verification. The [`onError()`]($w.Captcha.html#onError) event handler [`resets`]($w.Captcha.html#reset) the captcha and asks the visitor to redo the challenge. Return to Step 1.",
          "     * Verification: Captcha is verified. A captcha [`token`]($w.Captcha.html#token) is generated. The [`onVerified()`]($w.Captcha.html#onVerified) event handler enables the disabled clickable element.",
          " 1. The site visitor clicks the clickable element, triggering a backend function that calls [`authorize()`](wix-captcha-backend.html#authorize) with the generated [`token`]($w.Captcha.html#token).",
          " 1. [`authorize()`](wix-captcha-backend.html#authorize) checks whether the captcha token is valid. One of the following occurs:",
          "     * Error: Token fails authorization. The captcha is [`reset()`]($w.Captcha.html#reset) and the visitor is requested to redo the challenge. Return to Step 1.",
          "     * Authorized: Captcha is authorized. The restricted operation (such as data insert or login) is performed. Captcha is [`reset()`]($w.Captcha.html#reset) for future operations.",
          "",
          "",
          "Note the following:",
          "",
          "",
          "  + If backend authorization does not occur within 120 seconds of token generation, the token becomes invalid. Use the [`onTimeout()`]($w.Captcha.html#onTimeout) event handler to [`reset()`]($w.Captcha.html#reset) the captcha and asks the visitor to redo the challenge.",
          "  + To ensure complete protection, you must include backend [authorization](wix-captcha-backend.html#authorize) as a mandatory step in the captcha validation lifecycle.",
          "  + The captcha element does not offer protection for data submission performed via a dataset. To protect data submission with captcha, use code to perform the data operation (for example, [`insert()`](wix-data.html#insert) or [`save()`](wix-data.html#save)).",
          "",
          "",
          "For more information on working with your captcha element, click here (link to tutorial)." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "token",
        "labels":
          [ "changed" ],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 47 } ],
        "docs":
          { "summary": "Gets the captcha token.",
            "description":
              [ "When a site visitor successfully completes a captcha challenge, a captcha `token`",
                " is generated.",
                "",
                " Prior to completing the captcha challenge and following timeout, the token returns `undefined`." ],
            "links": [],
            "examples":
              [ { "title": "Get the token of the verified captcha",
                  "body":
                    [ "let myToken = $w(\"#myCaptcha\").token;",
                      "// \"01ABCDeFG23hijKlmn4...OPQ5r6stuvWXy\"" ],
                  "extra":
                    {  } },
                { "title": "Full captcha lifecycle scenario",
                  "body":
                    [ "/******************************",
                      " * backend code - captcha.jsw *",
                      " ******************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from wix-data;",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequest) {",
                      "  return wixCaptcha.authorize(submitRequest.token)",
                      "  .then (() => {",
                      "    wixData.insert(\"MyCollection\", submitRequest.Data);",
                      "  })",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/captcha';",
                      "",
                      "// Error handler",
                      "$w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#myCaptcha\").reset();",
                      "    showText(\"Something went wrong. Redo the Captcha challenge.\");",
                      "})",
                      "",
                      "// Verification handler",
                      "$w(\"#myCaptcha\").onVerified(() => {",
                      "  $w(\"#submitDataButton\").enable();",
                      "})",
                      "",
                      "// Timeout handler",
                      "$w(\"#myCaptcha\").onTimeout(() => {",
                      "  $w(\"#submitDataButton\").disable();",
                      "  $w(\"#myCaptcha\").reset();",
                      "  showText(\"The captcha timed out. Redo the challenge.\");",
                      "})",
                      "",
                      "// When user clicks submit button",
                      "export function submitDataButton_click(event, $w) {",
                      "  let submitRequest = {",
                      "    token: $w(\"#myCaptcha\").token,",
                      "    data: $w(\"#myInput\").value,",
                      "  }",
                      "  processSubmission(submitRequest)",
                      "    .then( () => {",
                      "      $w(\"#myCaptcha\").reset();",
                      "      showText(\"Data successfully submitted.\");",
                      "    })",
                      "    .catch(() => {",
                      "      $w(\"#myCaptcha\").reset();",
                      "      showText(\"Something went wrong. Redo the Captcha challenge.\");",
                      "    })",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onError",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.Captcha.ErrorHandler",
              "doc": "The name of the function or\n the function expression to run when an error occurs." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 109 } ],
        "docs":
          { "summary": "Adds an event handler that runs when an error occurs during captcha verification.",
            "description":
              [ "The `onError()` function allows you to perform actions when a network error occurs",
                "during captcha verification.",
                "",
                "If an error occurs, you can [`reset()`]($w.Captcha.html#reset) the",
                "captcha element and ask the user to redo the challenge." ],
            "links": [],
            "examples":
              [ { "title": "Register a callback to run when an error occurs",
                  "body":
                    [ "$w(\"#myCaptcha\").onError(() => {",
                      "  $w(\"#myCaptcha\").reset();",
                      "  showText(\"Something went wrong. Redo the Captcha challenge.\");",
                      "})" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onError" } },
      { "name": "onTimeout",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.TimeoutHandler",
              "doc": "The name of the function or\n the function expression to run when a captcha timeout occurs." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 153 } ],
        "docs":
          { "summary": "Adds an event handler that runs when the captcha token expires.",
            "description":
              [ "The `onTimeout()` function allows you to perform actions when a captcha timeout occurs.",
                "",
                "When a site visitor completes a captcha challenge, a [`token`]($w.Captcha.html#token) is",
                "generated. If 120 seconds pass without backend [authorization](wix-captcha-backend.html#authorize),",
                "the token expires and `onTimeout()` is triggered.",
                "",
                "If a timeout occurs, you can [`reset()`]($w.Captcha.html#reset) the",
                "captcha element and ask the user to redo the challenge. If you enabled the clickable",
                "element for triggering a restricted operation when the captcha was verified, disable it." ],
            "links": [],
            "examples":
              [ { "title": "Register a callback to run when a timeout occurs",
                  "body":
                    [ "$w(\"#myCaptcha\").onTimeout(() => {",
                      "  $w(\"#signupButton\").disable();",
                      "  $w(\"#myCaptcha\").reset();",
                      "  showText(\"The captcha timed out. Please redo the challenge.\");",
                      "})" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onTimeout" } },
      { "name": "onVerified",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.VerifiedHandler",
              "doc": "The name of the function or\n the function expression to run when the captcha is verified." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 201 } ],
        "docs":
          { "summary": "Adds an event handler that runs when the captcha is verified.",
            "description":
              [ "Once the captcha challenge has been successfully completed by the user, the `onVerified`",
                " callback is triggered.",
                "",
                " If the clickable element for triggering a submit, login, or another",
                " restricted operation was disabled, enable it." ],
            "links": [],
            "examples":
              [ { "title": "Register a callback to run when the captcha is verified",
                  "body":
                    [ "$w(\"#myCaptcha\").onVerified(() => {",
                      "  $w(\"#signupButton\").enable();",
                      "  let myToken = $w(\"#myCaptcha\").token;",
                      "})" ],
                  "extra":
                    {  } },
                { "title": "Full captcha lifecycle scenario",
                  "body":
                    [ "/******************************",
                      " * backend code - captcha.jsw *",
                      " ******************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from wix-data;",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequest) {",
                      "  return wixCaptcha.authorize(submitRequest.token)",
                      "  .then (() => {",
                      "    wixData.insert(\"MyCollection\", submitRequest.Data);",
                      "  })",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/captcha';",
                      "",
                      "// Error handler",
                      "$w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#myCaptcha\").reset();",
                      "    showText(\"Something went wrong. Redo the Captcha challenge.\");",
                      "})",
                      "",
                      "// Verification handler",
                      "$w(\"#myCaptcha\").onVerified(() => {",
                      "  $w(\"#submitDataButton\").enable();",
                      "})",
                      "",
                      "// Timeout handler",
                      "$w(\"#myCaptcha\").onTimeout(() => {",
                      "  $w(\"#submitDataButton\").disable();",
                      "  $w(\"#myCaptcha\").reset();",
                      "  showText(\"The captcha timed out. Redo the challenge.\");",
                      "})",
                      "",
                      "// When user clicks submit button",
                      "export function submitDataButton_click(event, $w) {",
                      "  let submitRequest = {",
                      "    token: $w(\"#myCaptcha\").token,",
                      "    data: $w(\"#myInput\").value,",
                      "  }",
                      "  processSubmission(submitRequest)",
                      "    .then( () => {",
                      "      $w(\"#myCaptcha\").reset();",
                      "      showText(\"Data successfully submitted.\");",
                      "    })",
                      "    .catch(() => {",
                      "      $w(\"#myCaptcha\").reset();",
                      "      showText(\"Something went wrong. Redo the Captcha challenge.\");",
                      "    })",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onVerified" } },
      { "name": "reset",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the captcha has been reset." },
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 65 } ],
        "docs":
          { "summary": "Resets the captcha challenge.",
            "description":
              [ "`reset()` is required when there is a captcha error, timeout, or when the action",
                "restricted by the captcha element was successfully completed." ],
            "links": [],
            "examples":
              [ { "title": "Reset the captcha element",
                  "body":
                    [ "$w(\"#myCaptcha\").reset();" ],
                  "extra":
                    {  } },
                { "title": "Full captcha lifecycle scenario",
                  "body":
                    [ "/******************************",
                      " * backend code - captcha.jsw *",
                      " ******************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from wix-data;",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequest) {",
                      "  return wixCaptcha.authorize(submitRequest.token)",
                      "  .then (() => {",
                      "    wixData.insert(\"MyCollection\", submitRequest.Data);",
                      "  })",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/captcha';",
                      "",
                      "// Error handler",
                      "$w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#myCaptcha\").reset();",
                      "    showText(\"Something went wrong. Redo the Captcha challenge.\");",
                      "})",
                      "",
                      "// Verification handler",
                      "$w(\"#myCaptcha\").onVerified(() => {",
                      "  $w(\"#submitDataButton\").enable();",
                      "})",
                      "",
                      "// Timeout handler",
                      "$w(\"#myCaptcha\").onTimeout(() => {",
                      "  $w(\"#submitDataButton\").disable();",
                      "  $w(\"#myCaptcha\").reset();",
                      "  showText(\"The captcha timed out. Redo the challenge.\");",
                      "})",
                      "",
                      "// When user clicks submit button",
                      "export function submitDataButton_click(event, $w) {",
                      "  let submitRequest = {",
                      "    token: $w(\"#myCaptcha\").token,",
                      "    data: $w(\"#myInput\").value,",
                      "  }",
                      "  processSubmission(submitRequest)",
                      "    .then( () => {",
                      "      $w(\"#myCaptcha\").reset();",
                      "      showText(\"Data successfully submitted.\");",
                      "    })",
                      "    .catch(() => {",
                      "      $w(\"#myCaptcha\").reset();",
                      "      showText(\"Something went wrong. Redo the Captcha challenge.\");",
                      "    })",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks":
    [ { "name": "ErrorHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 102 } ],
        "docs":
          { "summary": "An error event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "TimeoutHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 146 } ],
        "docs":
          { "summary": "A timeout event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "VerificationHandler",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 192 } ],
        "docs":
          { "summary": "A verification event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "VerifiedHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Captcha.js",
              "lineno": 194 } ],
        "docs":
          { "summary": "A verification event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "messages": [],
  "extra":
    {  } }