{ "name": "MusicPlayer",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin" ],
  "labels":
    [ "removed" ],
  "location":
    { "filename": "MusicPlayer.js",
      "lineno": 9 },
  "docs":
    { "summary": "An element for playing music.",
      "description":
        [ "The <a href=\"https://support.wix.com/en/article/about-the-wix-audio-player\" target=\"_blank\">Wix Music Player</a> allows",
          " you to add single tracks to your website.",
          "",
          " For a list of audio file types and sizes supported by the Wix Music Player, click <a href=\"https://support.wix.com/en/article/supported-media-file-types-and-file-sizes\" target=\"_blank\">here</a>." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "artistName",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 26 },
            { "filename": "MusicPlayer.js",
              "lineno": 46 } ],
        "docs":
          { "summary": "Sets or gets the name of the artist displayed in a music player.",
            "links": [],
            "examples":
              [ { "title": "Get the music player's artist name",
                  "body":
                    [ "let artist = $w(\"#myMusicPlayer\").artistName // \"Artist name\"" ],
                  "extra":
                    {  } },
                { "title": "Set the music player's artist name",
                  "body":
                    [ "$w(\"#myMusicPlayer\").artistName = \"Artist name\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "coverImage",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 592 },
            { "filename": "MusicPlayer.js",
              "lineno": 193 } ],
        "docs":
          { "summary": "Sets or gets the cover image displayed in the music player.",
            "description":
              [ "Setting the `coverImage` property changes the displayed image to",
                " the image found at the new `coverImage` value.",
                "",
                " Getting the `coverImage` property returns the location of the",
                " cover image file.",
                " The `coverImage` is one of the following:",
                "",
                " + An image from the <a href=\"https://support.wix.com/en/article/about-the-media-manager\" target=\"_blank\">Media Manager</a>.",
                "   URL Format: `wix:image://v1/<uri>/<filename>#originWidth=<width>&originHeight=<height>[&watermark=<watermark_manifest_string>]`",
                " + An external image URL.",
                "   URL Format: `web: http(s)://<image url>`" ],
            "links": [],
            "examples":
              [ { "title": "Get the cover image's location",
                  "body":
                    [ "let coverImageSource = $w(\"#myMusicPlayer\").coverImage;",
                      "// \"wix:image://v1/68d3a9_1de7529c444b4c9eb38401f8efe0cad2.jpg/flowers.jpg#originWidth=1970&originHeight=112" ],
                  "extra":
                    {  } },
                { "title": "Set the cover image to be an image from the Media Manager",
                  "body":
                    [ "$w(\"#myMusicPlayer\").coverImage = \"wix:image://v1/68d3a9_1de7529c444b4c9eb38401f8efe0cad2.jpg/flowers.jpg#originWidth=1970&originHeight=1120\";" ],
                  "extra":
                    {  } },
                { "title": "Set the cover image to be an image from the web",
                  "body":
                    [ "$w(\"#myMusicPlayer\").coverImage = \"http://placehold.it/250x250\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "currentTime",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 112 } ],
        "docs":
          { "summary": "Gets the current play time from the beginning of the audio track, in seconds.",
            "description":
              [ "To set the `currentTime` property, use the [`seek()`](#seek) function." ],
            "links": [],
            "examples":
              [ { "title": "Get the current play time",
                  "body":
                    [ "let currentTime = $w(\"#myMusicPlayer\").currentTime // 137" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "duration",
        "labels": [],
        "get": true,
        "set": false,
        "type": "number",
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 133 } ],
        "docs":
          { "summary": "Gets the total play time of the audio track, in seconds.",
            "links": [],
            "examples":
              [ { "title": "Get the current audio track's duration",
                  "body":
                    [ "let duration = $w(\"#myMusicPlayer\").duration // 198" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isMuted",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 363 } ],
        "docs":
          { "summary": "Indicates if the volume is currently muted.",
            "description":
              [ "To set the `isMuted` property, use the [`mute()`](#mute)",
                " and [`unMute()`](#unMute) functions." ],
            "links": [],
            "examples":
              [ { "title": "Get whether the volume is muted",
                  "body":
                    [ "let isMuted = $w(\"#myMusicPlayer\").isMuted // false" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isPlaying",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 385 } ],
        "docs":
          { "summary": "Indicates if an audio track is currently playing.",
            "description":
              [ "To set the `isPlaying` property, use the [`play()`](#play),",
                " [`pause()`](#pause), and [`stop()`](#stop) functions." ],
            "links": [],
            "examples":
              [ { "title": "Get whether an audio track is playing",
                  "body":
                    [ "let isPlaying = $w(\"#myMusicPlayer\").isPlaying // true" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "src",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 231 },
            { "filename": "MusicPlayer.js",
              "lineno": 272 } ],
        "docs":
          { "summary": "Sets or gets the file location of the audio file.",
            "description":
              [ "Setting the `src` property changes the audio file to",
                " the audio found at the new `src` value.",
                "",
                " Getting the `src` property returns the location of the",
                " audio file.",
                "",
                " The audio file is one of the following:",
                "",
                " + An audio file from the <a href=\"https://support.wix.com/en/article/about-the-media-manager\" target=\"_blank\">Media Manager</a>.",
                "   URL Format: `wix:audio://v1/<audio_uri>/<filename>#duration=<duration>`",
                " + An external audio URL.",
                "   URL Format: `(http(s)|blob|data)://site.com/audio-file.mp3`" ],
            "links": [],
            "examples":
              [ { "title": "Set the audio track to an audio file uploaded to your site",
                  "body":
                    [ "$w(\"#myMusicPlayer\").src = \"wix:audio://v1/22cf07_fa4dead769f2436598e0994fb6aa1185.mp3/Star Spangled Banner on Electric Guitar.#duration=132\";" ],
                  "extra":
                    {  } },
                { "title": "Set the audio track to an external audio URL",
                  "body":
                    [ "$w(\"#myMusicPlayer\").src = \"http://lcweb2.loc.gov/natlib/ihas/service/ssbanner/100010509/100010509.mp3\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "trackName",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 69 },
            { "filename": "MusicPlayer.js",
              "lineno": 89 } ],
        "docs":
          { "summary": "Sets or gets the track name displayed in a music player.",
            "links": [],
            "examples":
              [ { "title": "Get a music player's track name",
                  "body":
                    [ "let track = $w(\"#myMusicPlayer\").trackName // \"Track name\"" ],
                  "extra":
                    {  } },
                { "title": "Set a music player's track name",
                  "body":
                    [ "$w(\"#myMusicPlayer\").trackName = \"Track name\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "volume",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 311 },
            { "filename": "MusicPlayer.js",
              "lineno": 341 } ],
        "docs":
          { "summary": "Sets or gets the music player's volume.",
            "description":
              [ "Setting the `volume` property sets the music player's percentage of total",
                " volume. Set the value to a number between `0` and `100`.",
                "",
                " Getting the `volume` property returns the audio player's current",
                " percentage of total volume." ],
            "links": [],
            "examples":
              [ { "title": "Get a music player's volume",
                  "body":
                    [ "let volume = $w(\"#myMusicPlayer\").volume // 42" ],
                  "extra":
                    {  } },
                { "title": "Set a music player's volume",
                  "body":
                    [ "$w(\"#myMusicPlayer\").volume = 42;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "The actual volume heard by a site visitor depends on the value of the\n `volume` property and the volume settings on the visitor's device." ] } } ],
  "operations":
    [ { "name": "mute",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the volume has been muted." },
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 538 } ],
        "docs":
          { "summary": "Mutes audio volume.",
            "links": [],
            "examples":
              [ { "title": "Mute volume",
                  "body":
                    [ "$w(\"#myMusicPlayer\").mute();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onEnded",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the audio track has ended." } ],
        "ret":
          { "type": "$w.MusicPlayer",
            "doc": "The music player that triggered the event." },
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 654 } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback has ended.",
            "description":
              [ "A audio track ends when playback reaches the [`duration`](#duration) of the audio." ],
            "links": [],
            "examples":
              [ { "title": "Get the ID of the music player whose audio track has ended",
                  "body":
                    [ "$w(\"#myMusicPlayer\").onEnded( (event) => {",
                      "  let targetId = event.target.id; // \"myMusicPlayer\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onEnded" } },
      { "name": "onPause",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the audio track is paused." } ],
        "ret":
          { "type": "$w.MusicPlayer",
            "doc": "The music player that triggered the event." },
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 615 } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback is paused.",
            "description":
              [ "A audio track can be paused by a user clicking the music player's",
                " pause button or by calling its [`pause()`](#pause) or [`stop()`](#stop) functions." ],
            "links":
              [ "[pause( )](#pause)" ],
            "examples":
              [ { "title": "Get the ID of the music player that has been paused",
                  "body":
                    [ "$w(\"#myMusicPlayer\").onPause( (event) => {",
                      "  let targetId = event.target.id; // \"myMusicPlayer\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onPause" } },
      { "name": "onPlay",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the audio track is played." } ],
        "ret":
          { "type": "$w.MusicPlayer",
            "doc": "The music player that triggered the event." },
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 576 } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback is started or restarted.",
            "description":
              [ "A audio track can be played by a user clicking the music player's",
                " play button or by calling its [`play()`](#play) function." ],
            "links":
              [ "[play( )](#play)" ],
            "examples":
              [ { "title": "Get the ID of the music player that is playing",
                  "body":
                    [ "$w(\"#myMusicPlayer\").onPlay( (event) => {",
                      "  let targetId = event.target.id; // \"myMusicPlayer\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onPlay" } },
      { "name": "onProgress",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the audio track progresses." } ],
        "ret":
          { "type": "$w.MusicPlayer" },
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 691 } ],
        "docs":
          { "summary": "Adds an event handler that runs when playback progresses.",
            "description":
              [ "A audio track continually progresses as the audio plays." ],
            "links": [],
            "examples":
              [ { "title": "Get the ID of the music player whose audio track is progressing",
                  "body":
                    [ "$w(\"#myMusicPlayer\").onProgress( (event) => {",
                      "  let targetId = event.target.id; // \"myMusicPlayer\"",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onProgress" } },
      { "name": "pause",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When playback has been paused." },
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 461 } ],
        "docs":
          { "summary": "Pauses playback.",
            "description":
              [ "The `pause()` function pauses the audio track and fires a `pause` event.",
                "",
                " The `pause` event handlers set on the music player by the [onPause( )](#onPause)",
                " function are called." ],
            "links": [],
            "examples":
              [ { "title": "Pause playback",
                  "body":
                    [ "$w(\"#myMusicPlayer\").pause();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "play",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When playback begins or resumes." },
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 437 } ],
        "docs":
          { "summary": "Begins or resumes playback.",
            "description":
              [ "The `play()` function plays the audio track and fires a `play` event.",
                "",
                " The `play` event handlers set on the music player by the [onPlay( )](#onPlay)",
                " function are called." ],
            "links": [],
            "examples":
              [ { "title": "Begin or resume playback",
                  "body":
                    [ "$w(\"#myMusicPlayer\").play();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "seek",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the playback has moved to the specified time." },
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 407 } ],
        "docs":
          { "summary": "Moves playback to the specified time, in seconds.",
            "links": [],
            "examples":
              [ { "title": "Move playback to 1 minute and 42 seconds into the audio track",
                  "body":
                    [ "$w(\"#myMusicPlayer\").seek(102);" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "stop",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When playback has been stopped." },
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 485 } ],
        "docs":
          { "summary": "Pauses playback.",
            "description":
              [ "The `stop()` function stops the audio track and fires a `pause` event.",
                "",
                " The `pause` event handlers set on the music player by the [onPause( )](#onPause)",
                " function are called." ],
            "links": [],
            "examples":
              [ { "title": "Stop playback",
                  "body":
                    [ "$w(\"#myMusicPlayer\").stop();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "togglePlay",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When playback has been toggled." },
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 509 } ],
        "docs":
          { "summary": "Toggles playback.",
            "description":
              [ "The `togglePlay()` function either pauses or plays the current playback based",
                " on its current state:",
                "",
                " + If the playback is paused, it plays and a `play` event is fired. The",
                "   `play` event handlers set on the music player by the [onPlay( )](#onPlay)",
                "   function are called.",
                " + If the playback is playing, it is paused and a `pause` event is fired. The",
                "   `pause` event handlers set on the music player by the [onPause( )](#onPause)",
                "   function are called." ],
            "links": [],
            "examples":
              [ { "title": "Toggle playback",
                  "body":
                    [ "$w(\"#myMusicPlayer\").togglePlay();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "unmute",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the volume has been unmuted." },
        "locations":
          [ { "filename": "MusicPlayer.js",
              "lineno": 557 } ],
        "docs":
          { "summary": "Unmutes audio volume.",
            "links": [],
            "examples":
              [ { "title": "Unmute volume",
                  "body":
                    [ "$w(\"#myMusicPlayer\").unmute();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }