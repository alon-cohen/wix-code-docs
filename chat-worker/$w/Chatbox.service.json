{ "name": "Chatbox",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenMixin" ],
  "labels":
    [ "new" ],
  "location":
    { "lineno": 92,
      "filename": "chatApiPublic.js" },
  "docs":
    { "summary": "An element for sending and receiving messages.",
      "description":
        [ "Site visitors send and receive messages via a chatbox. a chatbox in the following scenarios:",
          "Business Chat: Site visitors or members chat with the site itself, referred to as the \"business.\"",
          "Social Chat: Site members chat with other site members, privately or in a group chat." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "maximized",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "lineno": 239,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Indicates if the chatbox is maximized.",
            "description":
              [ "If `maximized` is `true`, the chatbox is expanded. If `maximized` is `false`,",
                " the chatbox is collapsed." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "focusChannel",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "channelInfo",
              "type": "$w.ChannelInfo",
              "doc": "Channel information specifying which channel to focus on." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - Fulfilled - When the chat box focuses on the channel." },
        "locations":
          [ { "lineno": 198,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Expands the chatbox and focuses it on the specified chat channel.",
            "description":
              [ "The `focusChannel()` function returns a Promise that is resolved when",
                " the chatbox focuses on the specified channel." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getChannel",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "channelInfo",
              "type": "$w.ChannelInfo",
              "doc": "Channel information specifying which channel to focus on." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "$w.Chatbox.Channel" ] },
            "doc": "Fulfilled - Fulfilled - When the chat box focuses on the channel." },
        "locations":
          [ { "lineno": 255,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Gets a chatbox channel.",
            "description":
              [ "The `getChannel()` function returns a Promise that resolves to the requested channel.",
                " You can get a channel by specifying one of the following:",
                "",
                " + Channel ID: Gets the channel with the specified ID. `type` is ignored.",
                " + Type: Gets the channel of the specified type:",
                "",
                "   + \"Focused\": Gets the currently focused channel.",
                "   + \"Business\": Gets the business channel." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getChannelList",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ { "name": "Array",
                      "typeParams":
                        [ "$w.Chatbox.Channel" ] } ] },
            "doc": "Fulfilled - Fulfilled - When the chat box focuses on the channel." },
        "locations":
          [ { "lineno": 214,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Gets a list of available channels for a site visitor.",
            "description":
              [ "The `getChannelList()` function returns a Promise that resolves to a",
                " list of available channels for the current user." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "maximize",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - Fulfilled - When the chat box is maximized." },
        "locations":
          [ { "lineno": 172,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Expands the chatbox and sets its [`maximized`](#maximized) property to `true`.",
            "description":
              [ "The `maximize()` function returns a Promise that is resolved when",
                " the chatbox finishes expanding." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "minimize",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - Fulfilled - When the chat box is minimized." },
        "locations":
          [ { "lineno": 185,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Collapses the chatbox and sets its [`maximized`](#maximized) property to `false`.",
            "description":
              [ "The `minimize()` function returns a Promise that is resolved when",
                " the chatbox finishes collapsing." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onMessageReceived",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.Chatbox.Message",
              "doc": "The message that was received." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 109,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An event that fires when a site visitor receives a chat message.",
            "description":
              [ "The `onMessageReceived()` event handler runs when a chat message is received. The received [`Message`](#Message)",
                " object contains information about the message that was received." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "`onMessageReceived()` runs if the message was sent via the chatbox widget. It does not run if the message was sent programatically using [`sendMessage`](#sendMessage)." ] } },
      { "name": "onMessageSent",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.Chatbox.Message",
              "doc": "The message that was sent." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 125,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An event that fires when a site visitor sends a chat message.",
            "description":
              [ "The `onMessageSent()` event handler runs when a chat message is sent. The received [`Message`](#Message)",
                " object contains information about the message that was sent." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "`onMessageSent()` runs if the message was sent via the chatbox widget. It does not run if the message was sent programatically using [`sendMessage`](#sendMessage)." ] } },
      { "name": "sendMessage",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "MessageInfo",
              "type": "$w.Chatbox.SendMessageInfo",
              "doc": "Information about the message to be sent." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - Fulfilled - When the message is sent." },
        "locations":
          [ { "lineno": 148,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "Sends a chat message from a site visitor via a specific channel.",
            "description":
              [ "The `sendMessage()` function returns a Promise that is resolved when",
                " the message is sent.",
                "",
                " Currently only chat messages containing text can be sent programatically." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Chat messages sent programatically by the `sendMessage()` function do not trigger\n the `onMessageSent()` event handler." ] } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Channel",
        "locations":
          [ { "lineno": 67,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An object that contains information about a chat channel.",
            "links":
              [ "['getChannel()'](#getChannel)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "id",
              "type": "string",
              "doc": "ID of the channel." },
            { "name": "displayData",
              "type": "$w.Chatbox.DisplayData",
              "doc": "Display information associated with the channel." },
            { "name": "messages",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "$w.Chatbox.Message" ] },
              "doc": "An array of messages sent over the channel. Currently only the last message is included." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ChannelFocusInfo",
        "locations":
          [ { "lineno": 87,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An object representing information about a chatbox channel. Used to specify the channel a chatbox will focus on.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "channelId",
              "type": "string",
              "doc": "ID of a chat channel." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ChannelInfo",
        "locations":
          [ { "lineno": 75,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An object representing information about a chatbox channel.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "channelId",
              "type": "string",
              "doc": "ID of a chat channel.",
              "optional": true },
            { "name": "type",
              "type": "string",
              "doc": "Type of chat channel.\n One of the following:\n\n + `\"Focused\"`: Currently focused channel.\n + `\"Business\"`: Business channel.",
              "optional": true } ],
        "extra":
          { "notes":
              [ "At least one of the object properties is required. If `channelId` is passed, `type` is ignored." ] },
        "labels": [] },
      { "name": "DisplayData",
        "locations":
          [ { "lineno": 32,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An object representing display information associated with a [`Channel`](#channel).",
            "description":
              [ "Display data varies depending on the type of channel:",
                "",
                "<table style=\"border-collapse: collapse;\">",
                "  <tr>",
                "    <td><b>Channel Type</b></td>",
                "    <td><b>Description</b></td>",
                "    <td><b>Display Data</b></td>",
                "  </tr>",
                "  <tr>",
                "    <td>Business channel</td>",
                "    <td>Connects the current user with the site's business</td>",
                "    <td>Display data of the business</td>",
                "  </tr>",
                "  <tr>",
                "    <td>Private social channel</td>",
                "    <td>Connects the current user with another member</td>",
                "    <td>Display data of the other member</td>",
                "  </tr>",
                "  <tr>",
                "    <td>Group social channel</td>",
                "    <td>Connects the current user with other members</td>",
                "    <td>Display data of the chat group</td>",
                "  </tr>",
                "</table>" ],
            "links":
              [ "[`Channel`](#Channel)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "image",
              "type": "string",
              "doc": "For private social channels, the image associated with the site member's account. If there is no image associated with the account, defaults to the avatar image. \\nFor group social channels, the image associated with the chat group. \\nFor business channels, `image` is currently not supported." },
            { "name": "name",
              "type": "string",
              "doc": "For social channels, the member's name or chat group name. For business channels, the site's [display name](#wix-site-backend.generalInfo.html#getSiteDisplayName)." },
            { "name": "initials",
              "type": "string",
              "doc": "Only supported for business channels. Initials of the site's business." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Message",
        "locations":
          [ { "lineno": 15,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An object that contains information about a chat message.",
            "links":
              [ undefined ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "channelId",
              "type": "string",
              "doc": "ID of the channel on which the message was sent." },
            { "name": "type",
              "type": "string",
              "doc": "Type of message. Currently only `TEXT` is supported." },
            { "name": "summary",
              "type": "string",
              "doc": "First 250 characters of the chat message. Currently only text is included in the summary." },
            { "name": "participantId",
              "type": "string",
              "doc": "The sender's member ID. For a message sent from the site's business, the site owner's member ID." },
            { "name": "createdAt",
              "type": "number",
              "doc": "Date and time the message was sent." },
            { "name": "payload",
              "type": "$w.Chatbox.MessagePayload",
              "doc": "Content of the message." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "MessageInfo",
        "locations":
          [ { "lineno": 26,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "An object that contains information about a chat message to be sent.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "channelId",
              "type": "string",
              "doc": "The text to be sent in the message." },
            { "name": "messageText",
              "type": "string",
              "doc": "The ID of the channel over which the message is sent. If empty, message is sent to the site's business." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "MessagePayload",
        "locations":
          [ { "lineno": 7,
              "filename": "chatApiPublic.js" } ],
        "docs":
          { "summary": "The content of a chat message that was sent.",
            "description":
              [ "Currently only text is included in the `MessagePayload` object." ],
            "links":
              [ "['Message'](#Message), ['onMessageSent()'](#onMessageSent), ['onMessageReceived()'](#onMessageReceived)" ],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "text",
              "type": "string",
              "doc": "Text of the chat message." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }