{ "name": "$w",
  "mixes": [],
  "labels": [],
  "location":
    { "filename": "wixCode.es6",
      "lineno": 28 },
  "docs":
    { "summary": "The `$w` namespace contains everything you need in order to work\n with your site's components. It contains all of the UI elements, nodes, and\n events that make up your site. It also includes the [`$w()`]($w.html#w),\n [`onReady()`]($w.html#onReady), and [`at()`]($w.html#at) functions.\n\n The APIs in `$w` can only be used in front-end code.\n\n You do not need to import `$w`.",
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "$w",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "selector",
              "type": "string",
              "doc": "A selector or multiple comma-separated selectors." } ],
        "ret":
          { "type":
              [ "$w.Element",
                { "name": "Array",
                  "typeParams":
                    [ "$w.Element" ] } ],
            "doc": "A single selected element or an array of selected elements." },
        "locations":
          [ { "filename": "wixCode.es6",
              "lineno": 40 } ],
        "docs":
          { "summary": "Selects and returns elements from a page.",
            "description":
              [ "The `$w()` function selects single or multiple elements by ID or type.",
                "",
                " To select by ID, pass a selector string with the hash symbol",
                " (`#`) followed by the ID of the item you want to select (e.g. `\"#myElement\"`).",
                " The function returns the selected element object.",
                "",
                " To select by type, pass a selector string with the name of",
                " the type without the preceding `#` (e.g. `\"Button\"`). The function returns",
                " an array of the selected element objects. An array is returned even if one",
                " or no elements are selected.",
                "",
                " To select using multiple selectors, pass a selector string with",
                " multiple selectors separated by commas. The selectors in the",
                " comma-separated string can be ID selectors, type selectors, or a mixture of",
                " the two. The function returns an array of the selected element objects.",
                " An array is returned even if one or no elements are selected. If two or more",
                " selectors select the same element, it's still returned only once in the array." ],
            "links": [],
            "examples":
              [ { "title": "Select an element using its ID",
                  "body":
                    [ "let myElement = $w(\"#myElement\");",
                      "",
                      "let elementType = myElement.type; // \"$w.Type\"" ],
                  "extra":
                    {  } },
                { "title": "Select elements by type",
                  "body":
                    [ "let typeElements = $w(\"Type\");",
                      "",
                      "let firstOfType = typeElements[0];" ],
                  "extra":
                    {  } },
                { "title": "Select all the images on the page",
                  "body":
                    [ "let imageElements = $w(\"Image\");",
                      "",
                      "let firstImage = imageElements[0];" ],
                  "extra":
                    {  } },
                { "title": "Select elements using multiple selectors",
                  "body":
                    [ "let selected = $w(\"#myElement1, #myElement3, Type\");" ],
                  "extra":
                    {  } },
                { "title": "Hide all the page's images",
                  "body":
                    [ "$w(\"Image\").hide();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "at",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "context",
              "type": "$w.Event.EventContext",
              "doc": "An event context." } ],
        "ret":
          { "type": "$w.$w",
            "doc": "A selector function for the given context." },
        "locations":
          [ { "filename": "wixCode.es6",
              "lineno": 146 } ],
        "docs":
          { "summary": "Gets a selector function for a specific context.",
            "description":
              [ "The `at()` function returns a scoped selector where the scope is based on the",
                " context property. Usually, you will use `at()` in a event handler that handles",
                " events fired on an element contained in a repeater to get a [selector with",
                " repeated item scope]($w.Repeater.html#repeated-item-scope). The returned function",
                " selects the elements from the same repeater item where the event was fired.",
                "",
                " For example, suppose we have a repeater where each item contains an image and",
                " a text element. Here, when an image is clicked, the value of the text element in",
                " the same repeated item is changed to \"Selected\". All the other text elements",
                " in the other repeated items are not affected.",
                "",
                " ```javascript",
                " $w.onReady( function () {",
                "   $w(\"#myRepeatedImage\").onClick( (event, $w) => {",
                "     let $item = $w.at(event.context)",
                "     $item(\"#myRepeatedText\").text = \"Selected\";",
                "   } );",
                " } );",
                " ```" ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "onReady",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "initFunction",
              "type": "$w.ReadyHandler",
              "doc": "The name of the function or the function expression to run when the page has finished loading." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "wixCode.es6",
              "lineno": 81 } ],
        "docs":
          { "summary": "Sets the function that runs when all the page elements have finished loading.",
            "description":
              [ "Use the `onReady()` function for code you want to run before the user starts",
                " interacting with your page.",
                "",
                " The following code should be placed inside the `onReady()` event handler:",
                "",
                " + Initialization of element properties: Example: setting a text element's initial text value.",
                " + Function calls on elements to set their initial state: Example: disabling a button.",
                " + Dynamic event handlers that you want bound when the page loads: Example: setting an event handler to be called when the mouse pointer enters an element.",
                "",
                "",
                " Static event handlers, those that are wired using the Properties panel",
                " in the Editor, are not placed inside the `onReady()` event handler.",
                "",
                " The `onReady()` function in the **Site** tab is called before the",
                " `onReady()` function in the **Page** tab.",
                "",
                " The `onReady()` event handler may be called twice during the page rendering",
                " process, once server-side and once client-side. You can use this behavior to",
                " improve your page's load time.",
                "",
                " When `onReady()` is run server-side, you can pass data to the client-side by",
                " returning it from the `onReady()` handler function. Then, you can retrieve the",
                " passed data client-side by using the [`warmupData`](wix-window.rendering.html#warmupData)",
                " property of [`wix-window.rendering`](wix-window.rendering.html).",
                "",
                " When `onReady()` is run client-side, you can return a Promise from the `onReady`",
                " handler function to force the page to wait for your Promise to resolve before",
                " displaying the page to users.",
                "",
                " For example, suppose you are using a query to retrieve data that you want to",
                " display in a table. If you don't return the query promise the table might show",
                " without your data until the query's Promise resolves. Instead return the query",
                " Promise so that the page doesn't load for users until the query returns results",
                " and the table is populated." ],
            "links":
              [ "[$w( )](#w)" ],
            "examples":
              [ { "title": "Run code in an anonymous function when the page loads",
                  "body":
                    [ "$w.onReady( function() {",
                      "  let pageTitle = $w(\"#page1\").title;",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Wait for a Promise to resolve",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "$w.onReady(function () {",
                      "  return wixData.query(\"myCollection\")",
                      "    .find()",
                      "    .then( (results) => {",
                      "      $w(\"#myTable\").rows = results.items;",
                      "    } );",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates the technique of returning a Promise so that the\n page doesn't load until the Promise resolves. Here, we wait for the query to\n finish and populate a table before displaying the page to users." } },
                { "title": "Where to place code",
                  "body":
                    [ "// Import statement go at the top of your code, outside of onReady()",
                      "import wixWindow from 'wix-window';",
                      "",
                      "// Initialization statements without $w() don't need to be in onReady()",
                      "let hideCount = 0;",
                      "",
                      "// Code you want to run when the page loads",
                      "$w.onReady(function () {",
                      "  console.log(`Device viewing site is: ${wixWindow.formFactor}`);",
                      "",
                      "  // Initialize an element property",
                      "  $w(\"#myTextElement\").text = \"Hover over to hide\";",
                      "",
                      "  // Call a function on an element to set its initial state",
                      "  $w(\"#buttonReset\").disable();",
                      "",
                      "  // Dynamic event handler to be bound when the page loads",
                      "  $w(\"#myTextElement\").onMouseIn( (event) => {",
                      "    event.target.hide();",
                      "    console.log(`Hidden ${++hideCount} times`);",
                      "    $w(\"#buttonReset\").enable();",
                      "  } );",
                      "} );",
                      "",
                      "// Static event handler",
                      "export function buttonReset_onClick(event) {",
                      "\t$w(\"#myTextElement\").show();",
                      "  $w(\"#buttonReset\").disable();",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates which code should be placed inside the `onReady()`\n event handler." } },
                { "title": "Use warmupData to run a query server-side and pass the results to client-side code",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "import wixWindow from 'wix-window';",
                      "import {local} from 'wix-storage';",
                      "",
                      "let promise;",
                      "let dataResults;",
                      "",
                      "// start performing a query as soon as possible during",
                      "// the first render cycle and store the returned promise",
                      "if(wixWindow.rendering.renderCycle === 1) {",
                      "  promise = wixData.query(\"myCollection\").find();",
                      "}",
                      "",
                      "// this will run twice, once on the",
                      "// backend and once in the browser",
                      "$w.onReady( function () {",
                      "  // if it's the first render cycle, set up what",
                      "  // to do when the query promise resolves",
                      "  if(wixWindow.rendering.renderCycle === 1) {",
                      "    promise.then( (results) => {",
                      "      // use the query results for page setup",
                      "      $w(\"#text\").text = results.items[0].title;",
                      "",
                      "      // if the first cycle is happening on the backend",
                      "      if(wixWindow.rendering.env === \"backend\") {",
                      "        // return the items from the query results",
                      "        // to be used later in the browser",
                      "        return results.items;",
                      "      }",
                      "      // if the first cycle is happening in the browser, just",
                      "      // store the items from the query results in a variable",
                      "      dataResults = results.items;",
                      "    } );",
                      "  }",
                      "  // if it's the second render cycle, get the items from the query",
                      "  // results returned in the first cycle and store them in a variable",
                      "  else {",
                      "    dataResults = wixWindow.rendering.warmupData;",
                      "  }",
                      "",
                      "  // regardles of cycle, if in the browser, do some stuff that can",
                      "  // only be done in the browser, like using local storage",
                      "  if(wixWindow.rendering.env === \"browser\") {",
                      "    $w('#storedText').text = local.getItem(\"someKey\");",
                      "  }",
                      "",
                      "  // if it's the first cycle, return the promise",
                      "  // that rendering rendering should wait for",
                      "  // if there will be a second cycle, the value the promise",
                      "  // resolves to will be retrieved using warmupData",
                      "  if(wixWindow.rendering.renderCycle === 1) {",
                      "    return promise;",
                      "  }",
                      "} );",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to work with passing warmup data from the server-side\n render to cycle to be used in the client-side cycle. It takes into account the\n two possible render paths: 1) Two cycles - First cycle happens on the server\n and then a second cycle in the browser. 2) One cycle - Only one cycle that\n happens in the browser." } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Because `onReady()` code may be run twice, you need to be aware that if your\n `onReady()` code causes a side effect, such as inserting an item into a collection,\n that side effect might happen twice." ] } } ],
  "callbacks":
    [ { "name": "EventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.Event",
              "doc": "The event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "WixEvent.es6",
              "lineno": 3 } ],
        "docs":
          { "description":
              [ "Handles events." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ForItemCallback",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "$item",
              "type": "$w.$w",
              "doc": "A selector function with [repeated item scope](#repeated-item-scope)." },
            { "name": "itemData",
              "type": "Object",
              "doc": "The object from the repeater's `data` array that corresponds to the current repeated item." },
            { "name": "index",
              "type": "number",
              "doc": "The index of the `itemData` object in the `data` array." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Repeater.es6",
              "lineno": 563 } ],
        "docs":
          { "description":
              [ "Runs for items in a repeater." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "GalleryItemChangedEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.GalleryItemChangedEvent",
              "doc": "The event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "GalleryItemChangedEvent.es6",
              "lineno": 20 } ],
        "docs":
          { "summary": "Handles events fired when a gallery moves to a new image.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "GalleryItemClickedEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.GalleryItemClickedEvent",
              "doc": "The event that has occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "GalleryItemClickedEvent.es6",
              "lineno": 3 } ],
        "docs":
          { "summary": "Handles events fired when an image in a gallery is clicked.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "HtmlComponentMessageEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.HtmlComponentMessageEvent",
              "doc": "The HtmlComponent event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "HtmlComponentMessageEvent.es6",
              "lineno": 4 } ],
        "docs":
          { "summary": "Handles events fired when the code in an HtmlComponent sends a message.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "HtmlElementEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.HtmlComponentMessageEvent",
              "doc": "The message event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "HtmlComponent.es6",
              "lineno": 7 } ],
        "docs":
          { "description":
              [ "Handles events fired when a message is received from an HTML",
                " Component." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "IconMouseInEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.IconMouseInEvent",
              "doc": "The event that occurred." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "IconMouseInEvent.es6",
              "lineno": 3 } ],
        "docs":
          { "summary": "Handles events fired when a user hovers over a star on the rating component.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ItemReadyEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "$item",
              "type": "$w.$w",
              "doc": "A selector function with [repeated item scope](#repeated-item-scope)." },
            { "name": "itemData",
              "type": "Object",
              "doc": "The object from the repeater's `data` array that corresponds to the repeated item being created." },
            { "name": "index",
              "type": "number",
              "doc": "The index of the `itemData` object in the `data` array." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Repeater.es6",
              "lineno": 428 } ],
        "docs":
          { "description":
              [ "Handles repeater item ready events." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ItemRemovedEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "itemData",
              "type": "Object",
              "doc": "The object from the repeater's `data` array that corresponds to the repeated item being removed." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Repeater.es6",
              "lineno": 516 } ],
        "docs":
          { "description":
              [ "Handles repeater item removed events." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "KeyboardEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.KeyboardEvent",
              "doc": "The keyboard event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "KeyboardEvent.es6",
              "lineno": 4 } ],
        "docs":
          { "summary": "Handles events fired when the keyboard is pressed.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "MouseEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.MouseEvent",
              "doc": "The mouse event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "MouseEvent.es6",
              "lineno": 4 } ],
        "docs":
          { "summary": "Handles events fired when the mouse is clicked.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "QuickActionBarItemClickedEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.QuickActionBarItemClickedEvent",
              "doc": "The event that has occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "QuickActionBarItemClickedEvent.es6",
              "lineno": 4 } ],
        "docs":
          { "summary": "Handles events fired when an item in a quick action bar is clicked.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ReadyHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the `onReady` function has completed." },
        "locations":
          [ { "filename": "wixCode.es6",
              "lineno": 73 } ],
        "docs":
          { "summary": "Function that runs when all page elements have finished loading.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "TableCellEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.TableCellEvent",
              "doc": "The table cell event that occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "TableCellEvent.es6",
              "lineno": 14 } ],
        "docs":
          { "summary": "Handles events fired when a table cell is selected.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "TableRowEventHandler",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "event",
              "type": "$w.TableRowEvent",
              "doc": "The event that has occurred." },
            { "name": "$w",
              "type": "$w.$w",
              "doc": "Deprecated: A selector function. The $w function was used to\n enable event handlers to work with elements in [repeaters]($w.Repeater.html). Now, to get\n a scoped selector for working with repeater items, use the [$w.at()]($w.html#at) function\n and pass it the context property of the event parameter: `$item = $w.at(event.context)`." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "TableRowEvent.es6",
              "lineno": 14 } ],
        "docs":
          { "summary": "Handles events fired when a table row is selected.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "Validator",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "value",
              "type":
                [ "string",
                  { "name": "Array",
                    "typeParams":
                      [ "$w.UploadButton.File" ] },
                  "boolean" ],
              "doc": "The value of the element being validated." },
            { "name": "reject",
              "type": "Function",
              "doc": "A function that invalidates the element with the specified message." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "ValidatableMixin.es6",
              "lineno": 134 } ],
        "docs":
          { "summary": "Function that runs when custom validation is checked.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "messages": [],
  "extra":
    {  } }