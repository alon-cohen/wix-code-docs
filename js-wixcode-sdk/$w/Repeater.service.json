{ "name": "Repeater",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.HiddenCollapsedMixin" ],
  "labels": [],
  "location":
    { "filename": "Repeater.es6",
      "lineno": 96 },
  "docs":
    { "summary": "A repeating layout.",
      "description":
        [ "Repeaters provide a way for you to add repeating content to a page.",
          " Repeaters consist of repeating items, each with the same layout",
          " but different data.",
          "",
          " For example, the repeater below contains three items, each with the same",
          " layout. There is an image on the left and two text elements on the right.",
          " However, the data in each item is different. That is, the actual images and",
          " text values are different in each repeated item.",
          "",
          " ![Repeater example](images/repeater.png \"Repeater example\")",
          "",
          " The data displayed in a repeater comes from either:",
          "",
          " + Connecting the repeater and the elements contained within its items to a",
          "   dataset in the Editor.",
          " + Using the [`data`](#data) property in conjunction with the [`forEachItem()`](#forEachItem),",
          "   [`forItems()`](#forItems), and [`onItemReady()`](#onItemReady) functions",
          "   in code.",
          "",
          "",
          " <h3 id=\"item-template\">Repeated Item Template</h3>",
          "",
          " Each repeater has an item template that contains the elements and initial data",
          " that are used when new items are created. The template's initial state is the",
          " state of the first repeated item that appears in the Editor. Using code, you",
          " can set the properties of, get the properties of, or call functions on the",
          " elements of the item template by selecting the elements using",
          " [`$w()`]($w.html#w), the [global scope](#global-scope) selector function.",
          "",
          " <h3 id=\"selector-scope\">Selector Scope</h3>",
          "",
          " Selector functions are used to select specific page elements so you can work",
          " with them in code. Depending on which selector you use, you are able to",
          " select elements from the different scopes described below.",
          "",
          " There are two types of selector functions:",
          "",
          " + [Global Scope Selectors](#global-scope)",
          " + [Repeated Item Scope Selectors](#repeated-item-scope)",
          "",
          "",
          " <h4 id=\"global-scope\">Global Scope</h3>",
          " The [`$w()`]($w.html#w) function that is available to your Page",
          " and Site code selects elements in the global scope.",
          "",
          " A selector with global scope can be used to select any element that is not",
          " contained in a repeater. You can also use it to select an element that is",
          " contained in a repeater, but you need to understand what that selection means.",
          "",
          " When you select an element contained in a repeater from the global scope and",
          " you get the value of one of the element's properties, you receive the value",
          " of that element's property from the repeater's [item template](#item-template).",
          "",
          " For example, here `templateText` is the `text` value of the `myRepeatedText`",
          " element from the repeater's item template.",
          "",
          " ```javascript",
          " $w.onReady( function () {",
          "   let templateText = $w(\"#myRepeatedText\").text;",
          " } );",
          " ```",
          "",
          " When you select an element contained in a repeater from the global scope and",
          " you set the value of one of the element's properties or call one of the",
          " element's functions, the value is set or the function is called on the",
          " repeater's [item template](#item-template) **and** all repeated instances of",
          " that element.",
          "",
          "",
          " For example, here the item template is changed so that `\"New Text\"` is the",
          " `text` value of the `myRepeatedText` element. Also, all existing repeated",
          " items have the `text` value of their `myRepeatedText` element set to `\"New Text\"`.",
          "",
          " ```javascript",
          " $w.onReady( function () {",
          "   $w(\"#myRepeatedText\").text = \"New Text\";",
          " } );",
          " ```",
          "",
          " And here the item template is changed so that the `myRepeatedImage` element",
          " is hidden. Also, all existing repeated items have their `myRepeatedImage` element hidden.",
          "",
          " ```javascript",
          " $w.onReady( function () {",
          "   $w(\"#myRepeatedImage\").hide();",
          " } );",
          " ```",
          "",
          " <h4 id=\"repeated-item-scope\">Repeated Item Scope</h3>",
          " There are two instances where you get a repeated-item-scope selector:",
          "",
          " + The `$item` parameter of the [`forEachItem()`](#forEachItem),",
          "   [`forItems()`](#forItems), and [`onItemReady()`](#onItemReady) event",
          "   handlers.",
          " + When calling the [$w.at()]($w.html#at) and passing it an event whose",
          "   [`context`]($w.Event.html#context) is \"COMPONENT_SCOPE\". This is usually",
          "   done in an event handler that handles event on an element inside a repeater.",
          "",
          "",
          " A selector with repeated item scope can be used to select a specific instance",
          " of a repeating element.",
          "",
          " For example, here when the `myRepeatedImage` element is clicked, the value of",
          " a text element in the same repeated item where the image was clicked is changed",
          " to \"Selected\". All the other text elements elements with the ID `myRepeatedText`",
          " in the other items of the repeater are not affected.",
          "",
          " ```javascript",
          " $w.onReady( function () {",
          "   $w(\"#myRepeatedImage\").onClick( (event) => {",
          "     let $item = $w.at(event.context);",
          "     $item(\"#myRepeatedText\").text = \"Selected\";",
          "   } );",
          " } );",
          " ```",
          "",
          " And here, when each item is ready, the value of a text element is set to a",
          " value found in that specific item's data.",
          "",
          " ```javascript",
          " $w(\"#myRepeater\").onItemReady( ($item, itemData, index) => {",
          "   $item(\"#myRepeatedText\").text = itemData.textField;",
          " } );",
          " ```",
          "",
          " You can also use a selector with repeated item scoope to select non-repeating",
          " elements from the global scope. However, you cannot change a repeater's",
          " [item template](#item-template) using a selector with repeated item scope.",
          "",
          " You can restrict a selector with repeated item scope to only select",
          " elements from the current repeated items and their descendants, but not elements",
          " from the global scope by adding `.scoped()` to the selector so the function",
          " call looks like `$item.scoped(\"#idToSelect\")`.",
          "",
          " <h3 id=\"select-item\">Retrieve Repeater Item Data When Clicked</h3>",
          "",
          " Each repeated item in a repeater has a [`Container`]($w.Container.html) element",
          " that holds all of its repeated elements. To retrieve the data associated",
          " with a specific repeated item when it is clicked, create an `onClick` event",
          " handler for the item's `Container`. Depending on how you populated the repeater",
          " with data, you either user the connected dataset or the repeater's `data`",
          " array to retrieve the clicked item's data in the event handler.",
          "",
          " For a repeater populated by connecting it to a dataset:",
          "",
          " ```javascript",
          " $w.onReady( function () {",
          "   $w(\"#repeatedContainer\").onClick( (event) => {",
          "     let $item = $w.at(event.context);",
          "     let clickedItemData = $item(\"#myDataset\").getCurrentItem();",
          "   } );",
          " } );",
          " ```",
          "",
          " For a repeater populated by setting its [`data`](#data) property:",
          "",
          " ```javascript",
          " $w.onReady( function () {",
          "   $w(\"#repeatedContainer\").onClick( (event) => {",
          "     const data = $w(\"#myRepeater\").data;",
          "     let clickedItemData = data.filter(item => item._id === event.context.itemId));",
          "   } );",
          " } );",
          " ```" ],
      "links": [],
      "examples": [] },
  "properties":
    [ { "name": "data",
        "labels": [],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "Object" ] },
        "locations":
          [ { "filename": "Repeater.es6",
              "lineno": 274 },
            { "filename": "Repeater.es6",
              "lineno": 373 } ],
        "docs":
          { "summary": "Sets or gets the repeater data.",
            "description":
              [ "A repeater's data is stored as an array of objects. Each object in the array",
                " must contain a unique `_id` property which is used to match the object's",
                " data to the individual repeated items of the repeater as described below.",
                " The value of the `_id` property can only contain alphanumeric",
                " characters and hyphens (`-`). Other than `_id`, the objects in the",
                " repeater's data array can contain anything you want.",
                "",
                " For example, a simple array of repeater data may look like this:",
                " ```",
                " [",
                "   {",
                "     \"_id\": \"1\",",
                "     \"firstName\": \"John\",",
                "     \"lastName\": \"Doe\",",
                "     \"image\": \"http://someImageUrl/john.jpg\"",
                "   },",
                "   {",
                "     \"_id\": \"2\",",
                "     \"firstName\": \"Jane\",",
                "     \"lastName\": \"Doe\",",
                "     \"image\": \"http://someImageUrl/jane.jpg\"",
                "   }",
                " ]",
                " ```",
                "",
                " Repeater data is not automatically applied to the elements in the reapeated",
                " items. You choose how to use the repeater's data in the [`onItemReady()`](#onItemReady),",
                " [`onItemRemoved()`](#onItemRemoved), [`forItems()`](#forItems), and",
                " [`forEachItem()`](#forEachItem) callback functions. Most often, you",
                " apply the data of a repeated item to the properties and functions",
                " of the repeated elements contained in that repeated item.",
                "",
                " You cannot modify the data array in-place. To add, change, or remove",
                " objects from the repeater's data array:",
                "",
                "   1. Store the value of the `data` property in a variable.",
                "   1. Make changes to the objects of the shouldTriggerOnItemRemoved array.",
                "   1. Reset the `data` property with the modified array.",
                "",
                "",
                " When the repeater's `data` property is set:",
                "",
                "   1. New repeated items are created for each object that has an `_id` value",
                "      that is not already present in the current array of data objects. The elements",
                "      in the new items are first populated with the data of the repeater's",
                "      [item template](item-template). Then the [`onItemReady()`](#onItemReady)",
                "      event handler is triggered for each of the new items. Usually, you",
                "      overwrite some or all of the data populated from the item template",
                "      in the [`onItemReady()`](#onItemReady) event handler with the data for",
                "      that specific item. When all of the [`onItemReady()`](#onItemReady)",
                "      event handlers have finished running, the new items are displayed.",
                "   1. Repeated items are removed if their IDs are no longer in the array of",
                "      data objects. The [`onItemRemoved()`](#onItemRemoved) event handler is",
                "      triggered for each of the removed items.",
                "   1. Nothing occurs to repeated items whose IDs were already in the array",
                "      of data objects, even if other data in the object has changed. To update",
                "      repeated items with the new data, use the [`forEachItem()`](#forEachItem)",
                "      or [`forItems()`](#forItems) functions.",
                "",
                "",
                " Getting the `data` property returns the repeater's current data. If you",
                " have not yet explicitly set the repeater's `data`, getting the `data`",
                " property returns only the IDs of the current repeated items that were",
                " set in the Editor." ],
            "links": [],
            "examples":
              [ { "title": "Get a repeater's data",
                  "body":
                    [ "let repeaterData = $w(\"#myRepeater\").data;" ] },
                { "title": "Set a repeater's data",
                  "body":
                    [ "const bikeData = [",
                      "\t{",
                      "\t\t\"_id\":\"bike1\",",
                      "\t\t\"img\":\"wix:image://v1/6875c086ef453f5727c2b5932b3b3be4.png/Red Bike#originWidth=550&originHeight=300\",",
                      "\t\t\"kind\":\"Red Bike\"",
                      "\t},",
                      "\t{",
                      "\t\t\"_id\":\"bike2\",",
                      "\t\t\"img\":\"wix:image://v1/703b4af24578ada6f1e11725a468096e.png/Speed Bike#originWidth=550&originHeight=300\",",
                      "\t\t\"kind\":\"Black Bike\"",
                      "\t},",
                      "\t{",
                      "\t\t\"_id\":\"bike3\",",
                      "\t\t\"img\":\"wix:image://v1/2bb3219153c347daf475067d763be40d.png/Neon Bike#originWidth=550&originHeight=300\",",
                      "\t\t\"kind\":\"Green Bike\"",
                      "\t}",
                      "];",
                      "",
                      "$w(\"#myRepeater\").data = bikeData;" ] },
                { "title": "Set a repeater's data from a database query",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "$w.onReady(function () {",
                      "  $w(\"#myRepeater\").onItemReady( ($item, itemData, index) => {",
                      "    $item(\"#bookTitle\").text = itemData.title;",
                      "    $item(\"#bookSubtitle\").text = itemData.subtitle;",
                      "    $item(\"#bookCover\").src = itemData.pic;",
                      "  } );",
                      "",
                      "  wixData.query(\"Books\")",
                      "    .find()",
                      "    .then( (results) => {",
                      "      $w(\"#myRepeater\").data = results.items;",
                      "    } );",
                      "} );" ] },
                { "title": "Modify a repeater's data",
                  "body":
                    [ "// get current data array",
                      "let dataArray = $w(\"#myRepeater\").data;",
                      "",
                      "// change something in the data array",
                      "dataArray[0].somefield = \"New value\";",
                      "",
                      "// reset repeater data",
                      "$w(\"#myRepeater\").data = dataArray;" ] },
                { "title": "Set a repeater's data",
                  "body":
                    [ "// static repeater data",
                      "const bikeData = [",
                      "  {",
                      "    \"_id\":\"bike1\",",
                      "    \"img\":\"wix:image://v1/6875c086ef453f5727c2b5932b3b3be4.png/Red Bike#originWidth=550&originHeight=300\",",
                      "    \"description\":\"Red Bike\"",
                      "  },",
                      "  {",
                      "    \"_id\":\"bike2\",",
                      "    \"img\":\"wix:image://v1/703b4af24578ada6f1e11725a468096e.png/Speed Bike#originWidth=550&originHeight=300\",",
                      "    \"description\":\"Black Bike\"",
                      "  },",
                      "  {",
                      "    \"_id\":\"bike3\",",
                      "    \"img\":\"wix:image://v1/2bb3219153c347daf475067d763be40d.png/Neon Bike#originWidth=550&originHeight=300\",",
                      "    \"description\":\"Green Bike\"",
                      "  }",
                      "];",
                      "",
                      "$w.onReady(function () {",
                      "  // handle creation of new repeated items",
                      "  $w(\"#myRepeater\").onItemReady( ($item, itemData, index) => {",
                      "    $item(\"#image1\").src = itemData.img;",
                      "    $item(\"#text1\").text = itemData.description;",
                      "",
                      "    $w(\"#image1\").onClick( (event) => {",
                      "      let $item = $w.at(event.context);",
                      "      $item(\"#text1\").text = \"Selected\";",
                      "    } );",
                      "  } );",
                      "",
                      "  // set the repeater data, triggering the creation of new items",
                      "  $w(\"#myRepeater\").data = bikeData;",
                      "} );" ] },
                { "title": "Set a repeater's data and add new data on a button click",
                  "body":
                    [ "// static repeater data part 1",
                      "const bikeData1 = [",
                      "  {",
                      "    \"_id\":\"bike1\",",
                      "    \"img\":\"wix:image://v1/6875c086ef453f5727c2b5932b3b3be4.png/Red Bike#originWidth=550&originHeight=300\",",
                      "    \"description\":\"Red Bike\"",
                      "  },",
                      "  {",
                      "    \"_id\":\"bike2\",",
                      "    \"img\":\"wix:image://v1/703b4af24578ada6f1e11725a468096e.png/Speed Bike#originWidth=550&originHeight=300\",",
                      "    \"description\":\"Black Bike\"",
                      "  }",
                      "];",
                      "",
                      "// static repeater data part 2",
                      "const bikeData2 = [",
                      "  {",
                      "    \"_id\":\"bike3\",",
                      "    \"img\":\"wix:image://v1/2bb3219153c347daf475067d763be40d.png/Neon Bike#originWidth=550&originHeight=300\",",
                      "    \"description\":\"Green Bike\"",
                      "  }",
                      "];",
                      "",
                      "$w.onReady(function () {",
                      "  // handle creation of new repeated items",
                      "  $w(\"#myRepeater\").onItemReady( ($item, itemData, index) => {",
                      "    $item(\"#image1\").src = itemData.img;",
                      "    $item(\"#text1\").text = itemData.description;",
                      "",
                      "    $w(\"#image1\").onClick( (event) => {",
                      "      let $item = $w.at(event.context);",
                      "      $item(\"#text1\").text = \"Selected\";",
                      "    } );",
                      "  } );",
                      "",
                      "  // set the repeater data to be the first part of the static data,",
                      "  // triggering the creation of new items",
                      "  $w(\"#myRepeater\").data = bikeData1;",
                      "",
                      "  // add a handler for the \"add\" button that resets the repeater data",
                      "  // to be both parts of the static data, triggering the creation of",
                      "  // a new item",
                      "  $w(\"#addButton\").onClick( () => {",
                      "    let tempData = $w(\"#myRepeater\").data;",
                      "    $w(\"#myRepeater\").data = tempData.concat(bikeData2);",
                      "  } );",
                      "} );" ] },
                { "title": "Set the a repeater's data and remove some data on a button click",
                  "body":
                    [ "// static repeater data",
                      "const bikeData = [",
                      "  {",
                      "    \"_id\":\"bike1\",",
                      "    \"img\":\"wix:image://v1/6875c086ef453f5727c2b5932b3b3be4.png/Red Bike#originWidth=550&originHeight=300\",",
                      "    \"description\":\"Red Bike\"",
                      "  },",
                      "  {",
                      "    \"_id\":\"bike2\",",
                      "    \"img\":\"wix:image://v1/703b4af24578ada6f1e11725a468096e.png/Speed Bike#originWidth=550&originHeight=300\",",
                      "    \"description\":\"Black Bike\"",
                      "  },",
                      "  {",
                      "    \"_id\":\"bike3\",",
                      "    \"img\":\"wix:image://v1/2bb3219153c347daf475067d763be40d.png/Neon Bike#originWidth=550&originHeight=300\",",
                      "    \"description\":\"Green Bike\"",
                      "  }",
                      "];",
                      "",
                      "$w.onReady(function () {",
                      "  // handle creation of new repeated items",
                      "  $w(\"#myRepeater\").onItemReady( ($item, itemData, index) => {",
                      "    $item(\"#image1\").src = itemData.img;",
                      "    $item(\"#text1\").text = itemData.description;",
                      "",
                      "    $w(\"#image1\").onClick( (event) => {",
                      "      let $item = $w.at(event.context);",
                      "      $item(\"#text1\").text = \"Selected\";",
                      "    } );",
                      "  } );",
                      "",
                      "  // handle removal of new repeated items",
                      "  $w(\"#myRepeater\").onItemRemoved( (itemData) => {",
                      "    console.log(`Removed: ${JSON.stringify(itemData)}`);",
                      "  } );",
                      "",
                      "  // set the repeater data to be the first part of the static data,",
                      "  // triggering the creation of new items",
                      "  $w(\"#myRepeater\").data = bikeData;",
                      "",
                      "  // add a handler for the \"remove\" button that resets the repeater data",
                      "  // with the middle object removed, triggering the removal of the middle",
                      "  // repeated item",
                      "  $w(\"#removeButton\").onClick( () => {",
                      "    let tempData = $w(\"#myRepeater\").data;",
                      "    tempData.splice(1,1);",
                      "    $w(\"#myRepeater\").data = tempData;",
                      "  } );",
                      "} );" ] } ] },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "forEachItem",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "callback",
              "type": "$w.ForItemCallback",
              "doc": "The name of the function or the function expression to run for each repeated item." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Repeater.es6",
              "lineno": 569 } ],
        "docs":
          { "summary": "Runs a function for each repeated item.",
            "description":
              [ "Use the `forEachItem()` function to run a function on all of a repeater's",
                " repeated items. You can use the callback function to update or pull",
                " information from all of the repeater's repeated items.",
                "",
                " When you set a repeater's [`data`](#data) property with data that changes",
                " items with existing IDs, those changes are not automatically reflected",
                " in the elements contained in the repeater. That is because you are",
                " responsible for applying a repeater's data to its repeated items.",
                "",
                " To apply the data to items with new IDs, you can use the [`onItemReady()`](#onItemReady)",
                " event handler.",
                "",
                " To update items with existing IDs, you can use the `forEachItem()` or",
                " [`forItems()`](#forItems) functions.",
                "",
                " Usually, when updating repeated items you:",
                "",
                " + Apply the repeated item's `itemData` to the elements contained in each",
                "   of the repeater's repeated items.",
                " + Add event handlers to the elements contained in each of the",
                "   repeater's repeated items." ],
            "links": [],
            "examples":
              [ { "title": "Loop through all of a repeater's repeated items",
                  "body":
                    [ "$w(\"#myRepeater\").forEachItem( ($item, itemData, index) => {",
                      "  let repeatedElement = $item(\"#repeatedElement\");",
                      "  let nonRepeatedElement = $item(\"#nonRepeatedElement\");",
                      "  let itemDataValue = itemData.someProperty;",
                      "  let isEvenItem = index % 2 == 0;",
                      "} );" ] },
                { "title": "Update data in all of a repeater's repeated items",
                  "body":
                    [ "$w(\"#myRepeater\").forEachItem( ($item, itemData, index) => {",
                      "  $item(\"#repeatedImage\").src = itemData.img;",
                      "  $item(\"#repeatedText\").text = itemData.description;",
                      "} );" ] },
                { "title": "Update data in all of a repeater's repeated items",
                  "body":
                    [ "$w.onReady(function () {",
                      "    $w(\"#myDataset\").onReady( () => {",
                      "      $w(\"#myRepeater\").forEachItem( ($item, itemData, index) => {",
                      "          if(itemData.boolField){",
                      "              $item(\"myText\").text = \"Yes Ma'am!\";",
                      "          }",
                      "          else {",
                      "              $item(\"#myText\").text = \"No way Jose!\";",
                      "          }",
                      "      } );",
                      "  } );",
                      "} );" ] } ] },
        "extra":
          {  } },
      { "name": "forItems",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "itemIds",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "string" ] },
              "doc": "The IDs of the items on which to run the callback function." },
            { "name": "callback",
              "type": "$w.ForItemCallback",
              "doc": "The name of the function or the function expression to run for each repeated item." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "Repeater.es6",
              "lineno": 633 } ],
        "docs":
          { "summary": "Runs a function for each repeated item with the given IDs.",
            "description":
              [ "Use the `forItems()` function to run a function on a specified list of",
                " repeated items. You can use the callback function to update or pull",
                " information from the specified repeated items.",
                "",
                " When you set a repeater's [`data`](#data) property with data that changes",
                " items with existing IDs, those changes are not automatically reflected",
                " in the elements contained in the repeater. That is because you are",
                " responsible for applying a repeater's data to its repeated items.",
                "",
                " To apply the data to items with new IDs, you can use the [`onItemReady()`](#onItemReady)",
                " event handler.",
                "",
                " To update items with existing IDs, you can use the `forEachItem()` or",
                " [`forItems()`](#forItems) functions.",
                "",
                " Usually, when updating repeated items you:",
                "",
                " + Apply the repeated item's `itemData` to the elements contained in each",
                "   of the repeater's repeated items.",
                " + Add event handlers to the elements contained in each of the",
                "   repeater's repeated items." ],
            "links": [],
            "examples":
              [ { "title": "Loop through some of a repeater's repeated items",
                  "body":
                    [ "$w(\"#myRepeater\").forItems( [\"item1\", \"item4\"], ($item, itemData, index) => {",
                      "  let repeatedElement = $item(\"#repeatedElement\");",
                      "  let nonRepeatedElement = $item(\"#nonRepeatedElement\");",
                      "  let itemDataValue = itemData.someProperty;",
                      "  let isEvenItem = index % 2 == 0;",
                      "} ) ;" ] },
                { "title": "Update data in some of a repeater's repeated items",
                  "body":
                    [ "$w(\"#myRepeater\").forItems( [\"item1\", \"item4\"], ($item, itemData, index) => {",
                      "  $item(\"#repeatedImage\").src = itemData.img;",
                      "  $item(\"#repeatedText\").text = itemData.description;",
                      "} );" ] } ] },
        "extra":
          {  } },
      { "name": "onItemReady",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.ItemReadyEventHandler",
              "doc": "The name of the function or\n the function expression to run when the item is ready." } ],
        "ret":
          { "type": "$w.Repeater",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "filename": "Repeater.es6",
              "lineno": 434 } ],
        "docs":
          { "summary": "Sets the function that runs when a new repeated item is created.",
            "description":
              [ "Use the `onItemReady()` function for code you want to run before new",
                " repeated items are rendered.",
                "",
                " The callback is triggered when you add new items by setting the",
                " [`data`](#data) property. It is not triggered for existing items that",
                " are updated when you set the [`data`](#data) property. To run code after",
                " updating existing items, use the [`forEachItem`](#forEachItem) or",
                " [`forItems`](#forItems) functions.",
                "",
                "",
                " Usually, you use `onItemReady()` to:",
                "",
                " + Apply the repeated item's `itemData` to the properties and functions",
                "   of the repeated elements contained in the repeated item being created.",
                " + Add event handlers to the repeated elements contained in",
                "   the repeated item being created." ],
            "links": [],
            "examples":
              [ { "title": "Set up new repeated items",
                  "body":
                    [ "$w(\"#myRepeater\").onItemReady( ($w, itemData, index) => {",
                      "  let repeatedElement = $item(\"#repeatedElement\");",
                      "  let nonRepeatedElement = $item(\"#nonRepeatedElement\");",
                      "  let itemDataValue = itemData.someProperty;",
                      "  let isEvenItem = index % 2 == 0;",
                      "});" ] },
                { "title": "Set up new repeated items",
                  "body":
                    [ "$w(\"#myRepeater\").onItemReady( ($item, itemData, index) => {",
                      "  const repeatedText = $item(\"#repeatedText\");",
                      "  const repeatedImage = $item(\"#repeatedImage\");",
                      "  const numSelected = $item(\"#nonRepeatedText\");",
                      "",
                      "  repeatedImage.src = itemData.img;",
                      "  repeatedText.text = itemData.description;",
                      "",
                      "  repeatedImage.onClick( (event) => {",
                      "    if(repeatedText.text === \"Selected\"){",
                      "      repeatedText.text = itemData.description;",
                      "      numSelected.text = (Number(numSelected.text) - 1).toString();",
                      "    }",
                      "    else {",
                      "      repeatedText.text = \"Selected\";",
                      "      numSelected.text = (Number(numSelected.text) + 1).toString();",
                      "    }",
                      "  } );",
                      "} );" ] } ] },
        "extra":
          { "notes":
              [ "When using a dataset to populate the contents of your repeated items,\n  the `onItemReady()` callback function is triggered before the dataset\n  populates the values of your page elements. Therefore, element values\n  that you set using `onItemReady()` may be overridden when the dataset is\n  ready. To change the values set by the dataset, use [`forEachItem`](#forEachItem)\n  inside the datset's [`onReady()`](wix-dataset.html#onReady). For more\n  information, see the [`forEachItem`](#forEachItem) examples." ],
            "eventType": "itemReady" } },
      { "name": "onItemRemoved",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.ItemRemovedEventHandler",
              "doc": "The name of the function or\n the function expression to run when the item is removed." } ],
        "ret":
          { "type": "$w.Repeater",
            "doc": "The element on which the event is now registered." },
        "locations":
          [ { "filename": "Repeater.es6",
              "lineno": 520 } ],
        "docs":
          { "summary": "Sets the function that runs when a repeated item is removed.",
            "description":
              [ "Use the `onItemRemoved()` function for code you want to run when",
                " repeated items are removed. The callback is triggered when you remove",
                " items by setting the value of the [`data`](#data) property to an array",
                " in which some of the existing item IDs are no longer present." ],
            "links": [],
            "examples":
              [ { "title": "Get data from items being removed",
                  "body":
                    [ "$w(\"#myRepeater\").onItemRemoved( (itemData) => {",
                      "  let itemDataValue = itemData.someProperty;",
                      "});" ] } ] },
        "extra":
          { "notes":
              [ "The `onItemRemoved()` callback function is not called when the static\n repeated items that were set in the Editor are removed." ],
            "eventType": "itemRemoved" } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }