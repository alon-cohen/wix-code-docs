{ "name": "TextInput",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.HiddenCollapsedMixin",
      "$w.DisabledMixin",
      "$w.TextInputMixin",
      "$w.FocusMixin",
      "$w.ReadOnlyMixin",
      "$w.ClickableMixin",
      "$w.StyleMixin",
      "$w.RequiredMixin" ],
  "labels": [],
  "location":
    { "filename": "TextInput.es6",
      "lineno": 17 },
  "docs":
    { "summary": "An input element for capturing small amounts of text.",
      "description":
        [ "A text input is configured to receive",
          " <a href=\"https://www.wix.com/support/html5/article/text-input-settings\" target=\"_blank\">different types",
          " of information</a>, such as strings, numbers, or passwords." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "inputType",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "filename": "TextInput.es6",
              "lineno": 214 },
            { "filename": "TextInput.es6",
              "lineno": 256 } ],
        "docs":
          { "summary": "Sets or gets the input type of an Input element.",
            "description":
              [ "Setting the `inputType` property sets what type of data a",
                " user can enter into the text input element. However, it does not limit",
                " your ability to change the value programmatically.",
                "",
                " Getting the `inputType` property gets what type of data a",
                " user can enter into the text input element.",
                "",
                " The text input types are:",
                "",
                " + `\"text\"`: Can contain any type of character.",
                " + `\"password\"`: A password field. Text is hidden with bullets (•••).",
                " + `\"number\"`: A valid number.",
                " + `\"email\"`: A valid email address.",
                " + `\"url\"`: A valid web address.",
                " + `\"tel\"`: Can contain only digits and certain symbols.",
                "",
                "",
                " You can also set an element's `inputType` property in the Editor using the Settings pane:",
                " ![Input Settings pane](images/input_settings-type.png)" ],
            "links": [],
            "examples":
              [ { "title": "Gets a text input's input type",
                  "body":
                    [ "let type = $w(\"#myTextInput\").inputType;  // \"email\"" ],
                  "extra":
                    {  } },
                { "title": "Sets a text input's input type",
                  "body":
                    [ "$w(\"#myTextInput\").inputType = \"email\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "max",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "filename": "TextInput.es6",
              "lineno": 81 },
            { "filename": "TextInput.es6",
              "lineno": 118 } ],
        "docs":
          { "summary": "Sets or gets the maximum value for a text input element whose\n type is set to **Number**.",
            "description":
              [ "Setting the `max` property restricts users from changing",
                " the text input's value to a number greater than `max` if the",
                " text input is set to be a **Number** type. However, it does not limit",
                " your ability to change the value to a number greater than `max`",
                " programmatically.",
                "",
                " Set `max` to `undefined` to remove the current maximum value limitation.",
                "",
                " Getting the `max` property returns the maximum value a user",
                " can enter into the text input.",
                "",
                " You can also set an element's `max` property in the Editor using the Settings pane:",
                " ![Input Settings pane](images/input_settings-max_value.png)" ],
            "links":
              [ "[min](#min)" ],
            "examples":
              [ { "title": "Gets a text input's max value",
                  "body":
                    [ "let maxVal = $w(\"#myTextInput\").max;  // 200" ],
                  "extra":
                    {  } },
                { "title": "Sets a text input's max value",
                  "body":
                    [ "$w(\"#myTextInput\").max = 200;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "min",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "filename": "TextInput.es6",
              "lineno": 148 },
            { "filename": "TextInput.es6",
              "lineno": 184 } ],
        "docs":
          { "summary": "Sets or gets the minimum value for a text input element whose\n type is set to **Number**.",
            "description":
              [ "Setting the `min` property restricts users from changing",
                " the text input's value to a number lower than `min` if the",
                " text input is set to be a **Number** type. However, it does not limit",
                " your ability to change the value to a number lower than `min`",
                " programmatically.",
                "",
                " Set `min` to `undefined` to remove the current maximum value limitation.",
                "",
                " Getting the `min` property returns the minimum value a user",
                " can enter into the text input.",
                "",
                " You can also set an element's `min` property in the Editor using the Settings pane:",
                " ![Input Settings pane](images/input_settings-min_value.png)" ],
            "links":
              [ "[max](#max)" ],
            "examples":
              [ { "title": "Gets a text input's min value",
                  "body":
                    [ "let minVal = $w(\"#myTextInput\").min;  // 100" ],
                  "extra":
                    {  } },
                { "title": "Sets a text input's min value",
                  "body":
                    [ "$w(\"#myTextInput\").min = 100;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "filename": "TextInput.es6",
              "lineno": 284 } ],
        "docs":
          { "summary": "Gets an object containing information about the text input's styles.",
            "description":
              [ "The following styles can be used with text input elements:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderRadius`]($w.Style.html#borderRadius)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                " + [`color`]($w.Style.html#color)",
                "",
                "",
                " Getting or setting a text input's styles, gets or sets the styles of the",
                " text input's regular state. It does not set the styles of the text input's hover,",
                " focus, error, or disabled states." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ],
                  "extra":
                    {  } },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "filename": "TextInput.es6",
              "lineno": 40 },
            { "filename": "TextInput.es6",
              "lineno": 74 } ],
        "docs":
          { "summary": "Sets or gets a text input's value.",
            "description":
              [ "To reset the text input, restoring any placeholder text, set the value",
                " property to `null` or `undefined`." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's value",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // \"42\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's value",
                  "body":
                    [ "$w(\"#myElement\").value = \"42\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Changing a text input's `value` in code does not trigger an `onChange` event.\n\n Using the **Input Settings** panel in the Editor you can set the type of\n a text input. That type is used only for validation purposes. The value\n returned by the `value` property of a text input is always a string,\n regardless of the type set in the Editor.\n\n If an element is connected to a dataset, setting the element's `value`\n in code does not set the value of the connected field in the dataset.\n That means if you use the dataset to perform a submit, the value changed\n in code is not reflected in the submitted item.\n\n To submit the new value using a dataset, set the field's value using the\n [`setFieldValue()`](wix-dataset.html#setFieldValue) function before\n performing the submit." ] } } ],
  "operations": [],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }