{ "name": "Checkbox",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.DisabledMixin",
      "$w.HiddenCollapsedMixin",
      "$w.FocusMixin",
      "$w.ClickableMixin",
      "$w.StyleMixin",
      "$w.RequiredMixin",
      "$w.CheckedMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "filename": "Checkbox.es6",
      "lineno": 15 },
  "docs":
    { "summary": "Checkboxes are used for a single binary choice.",
      "links": [],
      "examples": [] },
  "properties":
    [ { "name": "checked",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "filename": "Checkbox.es6",
              "lineno": 98 } ],
        "docs":
          { "summary": "Sets or gets whether a checkbox is checked.",
            "description":
              [ "Setting the `checked` property to `true` places a check in",
                " the checkbox. Setting it to `false` removes the check from the checkbox.",
                "",
                " Getting the `checked` property returns",
                " whether the checkbox is checked or unchecked." ],
            "links": [],
            "examples":
              [ { "title": "Get whether a checkbox is checked",
                  "body":
                    [ "let isChecked = $w(\"#myCheckbox\").checked;  // true" ] },
                { "title": "Set a checkbox to be checked",
                  "body":
                    [ "$w(\"#myCheckbox\").checked = true;" ] },
                { "title": "Toggle whether a checkbox is checked",
                  "body":
                    [ "let myCheckbox = $w(\"#myCheckbox\");",
                      "myCheckbox.checked = !myCheckbox.checked;" ] } ] },
        "extra":
          {  } },
      { "name": "required",
        "labels": [],
        "get": true,
        "set": false,
        "type": "boolean",
        "locations":
          [ { "filename": "Checkbox.es6",
              "lineno": 119 } ],
        "docs":
          { "summary": "Determines if a checkbox is required to be checked.",
            "description":
              [ "If `required` is `true`, the checkbox is only valid if it is",
                " [checked](#checked).",
                "",
                " If `required` is `false`, the checkbox is always valid.",
                "",
                " You can also set a checkbox to be required",
                " by using the element's Settings pane in the Editor." ],
            "links": [],
            "examples": [] },
        "extra":
          {  } },
      { "name": "style",
        "labels":
          [ "changed" ],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "filename": "Checkbox.es6",
              "lineno": 139 } ],
        "docs":
          { "summary": "Gets an object containing information about the checkbox's styles.",
            "description":
              [ "The following styles can be used with checkboxes:",
                "",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderRadius`]($w.Style.html#borderRadius)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                "",
                "",
                " Getting or setting a checkbox's styles, gets or sets the styles of the",
                " checkbox's regular state. It does not set the styles of the checkbox's hover,",
                " focus, error, or disabled states." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ] },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ] } ] },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "Checkbox.es6",
              "lineno": 32 } ],
        "docs":
          { "summary": "Sets or gets a checkbox's value.",
            "description":
              [ "The `value` property is not related to whether the checkbox is checked or",
                " not. To determine the checked status of a checkbox, use the [`checked`](#checked)",
                " property.",
                "",
                " The `value` property is used for storing a value that is associated with",
                " the checkbox.",
                "",
                " It is not considered when evaluating the checkbox's validity",
                " and it does not trigger an `onChange` event when the value is modified.",
                "",
                " Even if a checkbox is connected to a dataset, its `value` property",
                " is not related to the value of the collection field it is connected to.",
                " The field's value is determined by the checkbox's [`checked`](#checked) property." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's value",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // \"42\"" ] },
                { "title": "Set an element's value",
                  "body":
                    [ "$w(\"#myElement\").value = 42;" ] } ] },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }