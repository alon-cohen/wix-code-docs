{ "name": "TextBox",
  "memberOf": "$w",
  "mixes":
    [ "$w.FormElement",
      "$w.DisabledMixin",
      "$w.TextInputMixin",
      "$w.HiddenCollapsedMixin",
      "$w.FocusMixin",
      "$w.ReadOnlyMixin",
      "$w.ClickableMixin",
      "$w.StyleMixin",
      "$w.RequiredMixin" ],
  "labels": [],
  "location":
    { "filename": "TextBox.es6",
      "lineno": 14 },
  "docs":
    { "summary": "An input element for capturing large amounts of text.",
      "links": [],
      "examples": [] },
  "properties":
    [ { "name": "inputType",
        "labels":
          [ "new",
            "removed" ],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "TextBox.es6",
              "lineno": 118 } ],
        "docs":
          { "summary": "Return the input type.",
            "description":
              [ "Getting the `inputType` property gets the type of the input." ],
            "links": [],
            "examples":
              [ { "title": "Get a text box's input type",
                  "body":
                    [ "let type = $w(\"#textElement\").inputType // \"text\"" ] } ] },
        "srcDocs":
          { "summary": "Return the input type.",
            "description":
              [ "Getting the `inputType` property gets the type of the input." ],
            "links": [],
            "examples":
              [ { "title": "Get a text box's input type",
                  "body":
                    [ "let type = $w(\"#textElement\").inputType // \"text\"" ] } ] } },
      { "name": "style",
        "labels": [],
        "get": true,
        "set": false,
        "type": "$w.Style",
        "locations":
          [ { "filename": "TextBox.es6",
              "lineno": 118 } ],
        "docs":
          { "summary": "Gets an object containing information about the text box's styles.",
            "description":
              [ "The following styles can be used with text boxes:",
                " + [`backgroundColor`]($w.Style.html#backgroundColor)",
                " + [`borderColor`]($w.Style.html#borderColor)",
                " + [`borderRadius`]($w.Style.html#borderRadius)",
                " + [`borderWidth`]($w.Style.html#borderWidth)",
                " + [`color`]($w.Style.html#color)",
                "",
                "",
                " Getting or setting a text box's styles, gets or sets the styles of the",
                " text box's regular state. It does not set the styles of the text box's hover,",
                " focus, error, or disabled states." ],
            "links": [],
            "examples":
              [ { "title": "Set the background color",
                  "body":
                    [ "$w(\"#myElement\").style.backgroundColor = \"rgba(255,0,0,0.5)\";" ] },
                { "title": "Get the background color",
                  "body":
                    [ "let bgColor = $w(\"#myElement\").style.backgroundColor;" ] } ] },
        "extra":
          {  } },
      { "name": "value",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "TextBox.es6",
              "lineno": 32 } ],
        "docs":
          { "summary": "Sets or gets a text input's value.",
            "description":
              [ "To reset the text box, restoring any placeholder text, set the `value`",
                " property to `null` or `undefined`." ],
            "links": [],
            "examples":
              [ { "title": "Get an element's value",
                  "body":
                    [ "let myValue = $w(\"#myElement\").value; // \"42\"" ] },
                { "title": "Set an element's value",
                  "body":
                    [ "$w(\"#myElement\").value = 42;" ] } ] },
        "extra":
          { "notes":
              [ "When getting the `value` of a text box in an [`onKeyPress`]($w.TextInputMixin.html#onKeyPress)\n event handler, you may receive the value of the element before the key\n was pressed. To get the text box's updated value, use the [`updatedTargetValue`]($w.KeyboardEvent.html#updatedTargetValue)\n property of the event handler's `event` parameter.\n\n If an element is connected to a dataset, setting the element's `value`\n in code does not set the value of the connected field in the dataset.\n That means if you use the dataset to perform a submit, the value changed\n in code is not reflected in the submitted item.\n\n To submit the new value using a dataset, set the field's value using the\n [`setFieldValue()`](wix-dataset.html#setFieldValue) function before\n performing the submit." ] } },
      { "name": "wrap",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "defaultValue": "`\"soft\"`",
        "locations":
          [ { "filename": "TextBox.es6",
              "lineno": 64 } ],
        "docs":
          { "summary": "Determines if the text contains line breaks when its value is read.",
            "description":
              [ "Setting the `wrap` property sets how the text box's contents",
                " are returned when its value is read. Setting `wrap` to `\"hard\"`",
                " means line breaks are automatically inserted into the text. The width of",
                " the text box determines where the line breaks are placed. Setting `wrap`",
                " to `\"soft\"` means line breaks are not inserted when the value of the",
                " text box is read.",
                "",
                " Getting the `wrap` property gets how the text box's contents",
                " are returned when its value is read." ],
            "links": [],
            "examples":
              [ { "title": "Get a text box's wrapping",
                  "body":
                    [ "let wrapping = $w(\"#textBox\").wrap // \"soft\"" ] },
                { "title": "Set a text box's wrapping",
                  "body":
                    [ "$w(\"#textBox\").wrap = \"hard\";" ] } ] },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }