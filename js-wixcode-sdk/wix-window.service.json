{ "name": "wix-window",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "filename": "window.es6",
      "lineno": 14 },
  "docs":
    { "summary": "The wix-window module contains functionality that pertains to the\n current browser window.",
      "description":
        [ "To use the window module, import `wixWindow` from the `wix-window` module:",
          "",
          "   ```javascript",
          "   import wixWindow from 'wix-window';",
          "   ```",
          "",
          " The APIs in `wix-window` can only be used in front-end code." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "browserLocale",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 269 } ],
        "docs":
          { "summary": "Gets the locale of the site visitor's browser.",
            "description":
              [ "A locale, also known as an IETF language tag, is an abbreviated code",
                " that defines the language, country, and other aspects of the site ",
                " visitor's browser, such as number format and date format.",
                "",
                " Some common locales include:",
                "",
                " + `\"en-US\"`: English, United States",
                " + `\"en-GB\"`: English, British",
                " + `\"es-ES\"`: Spanish, Spain",
                " + `\"de-DE\"`: German, Germany",
                " + `\"ja-JP\"`: Japanese, Japan",
                " + `\"fr-CH\"`: French, Switzerland",
                " + `\"it-IT\"`: Italian, Italy" ],
            "links": [],
            "examples":
              [ { "title": "Get the locale of a visitor's browser",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let browserLocale = wixWindow.browserLocale;  // \"en-US\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "formFactor",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 319 } ],
        "docs":
          { "summary": "Gets what kind of device is being used to view the page.",
            "description":
              [ "The `formFactor` property gets one of:",
                "",
                " + `\"Desktop\"`: When viewed in a desktop browser.",
                " + `\"Mobile\"`: When viewed in a mobile browser.",
                " + `\"Tablet\"`: When viewed in a tablet browser." ],
            "links": [],
            "examples":
              [ { "title": "Get a device's form factor",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let formFactor = wixWindow.formFactor;  // \"Mobile\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "locale",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 341 } ],
        "docs":
          { "summary": "Gets the locale of the current environment.",
            "description":
              [ "Deprecation note: The `locale` property is being deprecated. Use the",
                " [`browserLocale`](#browserLocal) property instead.",
                "",
                " A locale, also known as an IETF language tag, is an abbreviated code",
                " that defines the user's language, country, and other aspects of the user",
                " interface such as number format and date format.",
                "",
                " Some common locales include:",
                "",
                " + `\"en-US\"`: English, United States",
                " + `\"en-GB\"`: English, British",
                " + `\"es-ES\"`: Spanish, Spain",
                " + `\"de-DE\"`: German, Germany",
                " + `\"ja-JP\"`: Japanese, Japan",
                " + `\"fr-CH\"`: French, Switzerland",
                " + `\"it-IT\"`: Italian, Italy" ],
            "links": [],
            "examples":
              [ { "title": "Get an environment's locale",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let locale = wixWindow.locale;  // \"en-US\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "referrer",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 1269 } ],
        "docs":
          { "summary": "Gets the HTTP referrer header field.",
            "description":
              [ "The `referrer` is the address of the previous web page that the user was",
                " on before arriving at the current page, typically by clicking a link." ],
            "links": [],
            "examples":
              [ { "title": "Get the referrer information",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let referrer = wixWindow.referrer;  // \"http://somesite.com\"" ],
                  "extra":
                    {  } },
                { "title": "Get the previous page within a Wix site",
                  "body":
                    [ "// In Site tab",
                      "",
                      "import {session} from 'wix-storage';",
                      "import wixLocation from 'wix-location';",
                      "",
                      "let previousPageURL;",
                      "",
                      "$w.onReady(function () {",
                      "  previousPageURL = session.getItem(\"page\");",
                      "  session.setItem(\"page\", wixLocation.url);",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to use session storage to know which page\n is the page a site visitor previously visited. The code below needs to be\n placed in the **Site** tab so that it runs on all your site's pages. The\n code retrieves the URL of the page a visitor previously visited from session\n storage. It then stores the URL of the vistor's current page in session\n storage. When the visitor navigates to another page, this stored URL is\n retrieved as the previous page URL." } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "When visitors move from page to page within your site, the `referrer` property\n does not contain the address of the page the visitor came from. This is because\n Wix sites are built as <a href=\"https://en.wikipedia.org/wiki/Single-page_application\" target=\"_blank\">single page applications</a>.\n To get the previous page a visitor was visiting within your site, you can\n use [`wix-storage`](wix-storage.html) to store the visitor's current page\n and retrieve the visitor's previous page." ] } },
      { "name": "viewMode",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 296 } ],
        "docs":
          { "summary": "Gets which mode the site is currently being viewed in.",
            "description":
              [ "The `viewMode` property gets either:",
                "",
                " + `\"Preview\"`: When previewing the site using the **Preview** button in the Editor.",
                " + `\"Site\"`: When viewing the published site." ],
            "links": [],
            "examples":
              [ { "title": "Get a window's view mode",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let viewMode = wixWindow.viewMode;  // \"Site\"" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "getBoundingRect",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-window.WindowSizeInfo" ] },
            "doc": "Fulfilled - An object containing information about the window's size, the document's size, and the current scroll position." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 416 } ],
        "docs":
          { "summary": "Returns information about the window.",
            "description":
              [ "The `getBoundingRect()` function returns a Promise that resolves to an object",
                " containing information about the current window's size, the document's size,",
                " and the current scroll position." ],
            "links": [],
            "examples":
              [ { "title": "Get information about the window",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.getBoundingRect()",
                      "  .then( (windowSizeInfo) => {",
                      "    let windowHeight = windowSizeInfo.window.height;      // 565",
                      "    let windowWidth = windowSizeInfo.window.width;        // 1269",
                      "    let documentHeight = windowSizeInfo.document.height;  // 780",
                      "    let documentWidth = windowSizeInfo.document.width;    // 1269",
                      "    let scrollX = windowSizeInfo.scroll.x;                // 0",
                      "    let scrollY = windowSizeInfo.scroll.y;                // 120",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getCurrentGeolocation",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "Fulfilled - The coordinates and timestamp of the current location.\nRejected - The user blocked the geolocation popup." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 561 } ],
        "docs":
          { "summary": "Returns the current geolocation of the user.",
            "description":
              [ "The `getCurrentGeolocation()` function returns a Promise that resolves to an",
                " object containing the current geolocation of the user.",
                "",
                " The object contains the following key:value pairs:",
                "",
                " + `\"timestamp\"`: The geolocation timestamp representing the date and time at which the location was retrieved.",
                " + `\"coords\"`: An object that defines the location.",
                "   + `\"latitude\"`: The position's latitude in decimal degrees.",
                "   + `\"longitude\"`: The position's longitude in decimal degrees.",
                "   + `\"altitude\"`: The position's altitude in metres, relative to sea level. This value may be null if the browser cannot provide the data.",
                "   + `\"accuracy\"`: The accuracy in meters of the latitude and longitude properties.",
                "   + `\"altitudeAccuracy\"`: The accuracy in meters of the altitude property. This value may be null.",
                "   + `\"heading\"`: The direction in degrees in which the device is traveling. It indicates how far off from heading true north the device is. If `speed` is `0`, the heading is `NaN`. This value may be null if the browser cannot provide the data.",
                "   + `\"speed\"`: The velocity in meters per second of the device. This value may be null if the browser cannot provide the data." ],
            "links": [],
            "examples":
              [ { "title": "Get the geolocation data",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.getCurrentGeolocation()",
                      "  .then( (obj) => {",
                      "    let timestamp = obj.timestamp;                  // 1495027186984",
                      "    let latitude = obj.coords.latitude;             // 32.0971036",
                      "    let longitude = obj.coords.longitude;           // 34.774391099999995",
                      "    let altitude = obj.coords.altitude;             // null",
                      "    let accuracy = obj.coords.accuracy;             // 29",
                      "    let altAccuracy = obj.coords.altitudeAccuracy;  // null",
                      "    let heading = obj.coords.heading;               // null",
                      "    let speed = obj.coords.speed;                   // null",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "The `getCurrentGeolocation()` function has the following limitiations:\n\n + On Chrome, the function only works on HTTPS sites.\n + On Chrome, Firefox, and Safari, the function only works if the user\n   approves a popup." ] } },
      { "name": "getRouterData",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "Object",
            "doc": "The data returned by the router." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 538 } ],
        "docs":
          { "summary": "Returns the data that a router passed to the page in its response.",
            "description":
              [ "When you create a router and define its functionality in its [router()](wix-router.html#router)",
                " function, you can choose to send data along with the router's [response](wix-router.WixRouterResponse.html).",
                " That data is retrieved in the code of the page that was routed to using the",
                " `getRouterData()` function.",
                "",
                " If you call the `getRouterData()` function from a non-router page or a router",
                " page that wasn't sent any data, the function returns `null`." ],
            "links":
              [ "[router( )](wix-router.html#router)",
                "[WixRouterResponse](wix-router.WixRouterResponse.html)" ],
            "examples":
              [ { "title": "Get the data passed by a router",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "let routerData = wixWindow.getRouterData();" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "openLightbox",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "name",
              "type": "string",
              "doc": "The name of the lightbox to open." },
            { "name": "data",
              "type": "Object",
              "doc": "The data to pass to the lightbox.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "Fulfilled - The returned data from the lightbox.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 606 } ],
        "docs":
          { "summary": "Opens a lightbox and optionally passes it the given data.",
            "description":
              [ "The `openLightbox()` function returns a Promise which is resolved when the",
                " lightbox closes. If the lightbox is closed programmatically using its",
                " [`close()`](wix-window.lightbox.html#close) function, and the",
                " [`close()`](wix-window.lightbox.html#close) function was invoked",
                " with a data parameter, then the Promise resolves to that data object.",
                "",
                " If you send a data object to the lightbox, use the [`getContext()`](wix-window.lightbox.html#getContext)",
                " function in the lightbox's code to access the received data.",
                "",
                " To pass data to the lightbox that is opened, you must open the lightbox",
                " programmatically using the [`openLightbox()`](wix-window.html#openLightbox)",
                " function. If the lightbox is opened automatically when the page loads or",
                " by a link from a page element, data will not be passed to the lightbox.",
                " Therefore, if you want to pass data to the lightbox, make sure",
                " **Automatically display lightbox on pages** is <a href=\"https://support.wix.com/en/article/setting-which-page-your-lightbox-appears-on\" target=\"_blank\">set</a> to **No** in the",
                " **Lightbox Settings** panel in the Editor and don't set any element's link",
                " to open the lightbox. Instead, create your own method for opening",
                " the lightbox programmatically. For example, you can add a button with an `onClick` event",
                " handler that calls the [`openLightbox()`](wix-window.html#openLightbox) function.",
                "",
                " To pass data back to the page that opened the lightbox, you must close the",
                " lightbox programmatically using the `close()` function. If the lightbox is",
                " closed by the site visitor clicking the 'X' icon, close button, or lightbox",
                " overlay, data will not be passed back the the page that opened the lightbox.",
                " Therefore, if you want to make sure data is passed back to the page that",
                " opened the lightbox, <a href=\"https://support.wix.com/en/article/setting-how-your-lightbox-is-closed\" target=\"_blank\">disable",
                " all of the methods mentioned above</a> and create your own method for closing",
                " the lightbox programmatically. For example, you can add a button with an `onClick` event",
                " handler that calls the `close()` function." ],
            "links":
              [ "[openModal( )](#openModal)" ],
            "examples":
              [ { "title": "Open a lightbox",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\");" ],
                  "extra":
                    {  } },
                { "title": "Open a lightbox and send it data",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\", dataObj);" ],
                  "extra":
                    {  } },
                { "title": "Open a lightbox and receive data when it is closed",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\")",
                      "  .then( (data) => {",
                      "    let receivedData = data;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Open a lightbox, send it data, and receive data back when it is closed",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openLightbox(\"LightboxName\", dataObj)",
                      "  .then( (data) => {",
                      "    let receivedData = data;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "A scenario where information is passed between a page and a lightbox",
                  "body":
                    [ "/*************",
                      " * Page Code *",
                      " *************/",
                      "",
                      "import wixWindow from 'wix-window';",
                      "",
                      "export function openButton_click(event) {",
                      "  wixWindow.openLightbox(\"MyLightBox\", {",
                      "    \"pageSend1\": $w('#pageSend1').value,",
                      "    \"pageSend2\": $w('#pageSend2').value",
                      "  })",
                      "  .then( (data) => {",
                      "    $w('#pageReceive1').text = data.lightboxSend1;",
                      "    $w('#pageReceive2').text = data.lightboxSend2;",
                      "  } );",
                      "}",
                      "",
                      "/*****************",
                      " * Lightbox Code *",
                      " *****************/",
                      "",
                      "import wixWindow from 'wix-window';",
                      "",
                      "$w.onReady( function () {",
                      "  let received = wixWindow.lightbox.getContext();",
                      "  $w('#lightBoxReceive1').text = received.pageSend1;",
                      "  $w('#lightBoxReceive2').text = received.pageSend2;",
                      "} );",
                      "",
                      "export function closeButton_click(event) {",
                      "  wixWindow.lightbox.close( {",
                      "    \"lightBoxSend1\": $w('#lightBoxSend1').value,",
                      "    \"lightBoxSend2\": $w('#lightBoxSend2').value",
                      "  } );",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to pass data from a page to a lightbox that\n it opens and from the lightbox back to the page as it closes.\n\n It assumes that the page has:\n\n + An open button that is used to open the lightbox.\n + Two text inputs where information that is to be passed to the lightbox is entered.\n + Two text elements where information that is passed from the lightbox is displayed.\n\n\n It assumes that the lightbox has:\n\n + An close button that is used to close the lightbox.\n + Two text inputs where information that is to be passed to the page is entered.\n + Two text elements where information that is passed from the page is displayed." } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "Use the name of the lightbox and not the lightbox's ID when calling\n `openLightbox()`." ] } },
      { "name": "openModal",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "url",
              "type": "string",
              "doc": "The URL of the page to show in the modal window." },
            { "name": "options",
              "type": "wix-window.OpenModalOptions",
              "doc": "The options used for the modal window." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the modal window is closed.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 996 } ],
        "docs":
          { "summary": "Opens a modal window that displays the specified web page.",
            "description":
              [ "A modal window displays the page specified by the `url` property over",
                " your current page. Unlike a [lightbox](wix-window.lightbox.html), which",
                " is opened using the [`openLightbox()`](#openLightbox) function, the window",
                " opened by `openModal()` is not part of your site structure.",
                "",
                " Only one modal window can be open at any given time. Therefore, opening",
                " a modal window closes an already open modal window if there is one." ],
            "links":
              [ "[openLightbox( )](#openLightbox)" ],
            "examples":
              [ { "title": "Open a modal window",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openModal(\"https://en.wikipedia.org/wiki/Wix.com\", {",
                      "  \"width\": 750,",
                      "  \"height\": 500",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Open a modal window and log a message when it is closed",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openModal(\"https://en.wikipedia.org/wiki/Wix.com\", {",
                      "    \"width\": 750,",
                      "    \"height\": 500",
                      "  } )",
                      "  .then( () => {",
                      "    console.log(\"Modal closed.\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "The specified `url` must be an HTTPS URL. To use an HTTP URL, [turn off\n SSL for your site](https://support.wix.com/en/article/turning-ssl-on-or-off-for-your-site)." ] } },
      { "name": "postMessage",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "message",
              "type": "Object",
              "doc": "The message to send." },
            { "name": "target",
              "type": "string",
              "doc": "The target to send the message to. Must be `\"parent\"` or omitted. Defaults to `\"parent\"`.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "Object" ] },
            "doc": "Fulfilled - The data returned from the modal window.\nRejected - The error that caused the rejection." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 1055 } ],
        "docs":
          { "summary": "Sends a message to the page's parent.",
            "description":
              [ "If a page is embedded within another site, using an [HtmlComponent]($w.HtmlComponent.html)",
                " on a Wix site or an [iframe](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe)",
                " on a non-Wix site, you can use the `postMessage()` function to send a",
                " message from the inner site to the outer site.",
                "",
                " When the parent site is a Wix site, use the [`onMessage()`]($w.HtmlComponent.html#onMessage)",
                " function to receive the message on the parent page.",
                "",
                " When the parent site is a non-Wix site, use the page's `window.onmessage`",
                " event handler to read the `data` property of the received `MessageEvent`",
                " to receive the message on the parent page." ],
            "links": [],
            "examples":
              [ { "title": "Send a message to a Wix parent site",
                  "body":
                    [ "/* * * * * * * * * * * * * * * * * * * * * * *",
                      " * Code for the inner site to post a message *",
                      " * * * * * * * * * * * * * * * * * * * * * * */",
                      "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.postMessage(dataObj);",
                      "",
                      "/* * * * * * * * * * * * * * * * * * * * * * * * *",
                      " * Code for the outer site to receive a message  *",
                      " * * * * * * * * * * * * * * * * * * * * * * * * *",
                      " *",
                      " * $w(\"#myHtmlComponent\").onMessage( (event, $x) => {",
                      " *   let message = event.data;",
                      " * } );",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Send a message to a non-Wix parent site",
                  "body":
                    [ "/* * * * * * * * * * * * * * * * * * * * * * *",
                      " * Code for the inner site to post a message *",
                      " * * * * * * * * * * * * * * * * * * * * * * */",
                      "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.postMessage(dataObj);",
                      "",
                      "/* * * * * * * * * * * * * * * * * * * * * * * * *",
                      " * Code for the outer site to receive a message  *",
                      " * * * * * * * * * * * * * * * * * * * * * * * * *",
                      " *",
                      " * <script>",
                      " *   window.addEventListener(\"message\", event => {",
                      " *    let message = event.data;",
                      " *   } );",
                      " * </script>",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "scrollBy",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "x",
              "type": "number",
              "doc": "The horizontal offset, in pixels, to scroll by." },
            { "name": "y",
              "type": "number",
              "doc": "The vertical offset, in pixels, to scroll by." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the scroll is complete." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 492 } ],
        "docs":
          { "summary": "Scrolls the page by a given number of pixels.",
            "description":
              [ "The `scrollBy()` function returns a Promise that resolves when the current",
                " page has been scrolled by the given number of pixels,",
                "",
                " The `x` and `y` parameters determine the number of horizontal and vertical",
                " pixels to scroll the current page. Negative numbers scroll up or to the",
                " left and positive numbers scroll down or to the right." ],
            "links": [],
            "examples":
              [ { "title": "Scroll the page by a given number of pixels",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollBy(100, 500);" ],
                  "extra":
                    {  } },
                { "title": "Scroll the page by a given number of pixels and log message when done",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollBy(100, 500)",
                      "  .then( ( ) => {",
                      "    console.log(\"Done with scroll\");",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "scrollTo",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "x",
              "type": "number",
              "doc": "The horizontal position, in pixels, to scroll to." },
            { "name": "y",
              "type": "number",
              "doc": "The vertical position, in pixels, to scroll to." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the scroll is complete." },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 442 } ],
        "docs":
          { "summary": "Scrolls the page to a specific location.",
            "description":
              [ "The `scrollTo()` function returns a Promise that resolves when the current",
                " page has been scrolled to the given location.",
                "",
                " The `x` and `y` parameters determine the top-left pixel that is",
                " displayed on screen after the scroll.",
                "",
                " To scroll to a specific element on the page, see the `$w.Node`",
                " [`scrollTo()`]($w.Node.html) function." ],
            "links": [],
            "examples":
              [ { "title": "Scroll the page to a location",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollTo(100, 500);" ],
                  "extra":
                    {  } },
                { "title": "Scroll the page to a location and log message when done",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.scrollTo(100, 500)",
                      "  .then( ( ) => {",
                      "    console.log(\"Done with scroll\");",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "trackEvent",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "eventName",
              "type": "string",
              "doc": "The name of the event." },
            { "name": "parameters",
              "type":
                [ "wix-window.trackingParameters.AddPaymentInfoEvent",
                  "wix-window.trackingParameters.AddProductImpressionEvent",
                  "wix-window.trackingParameters.AddToCartEvent",
                  "wix-window.trackingParameters.ClickProductEvent",
                  "wix-window.trackingParameters.CustomEvent",
                  "wix-window.trackingParameters.InitiateCheckoutEvent",
                  "wix-window.trackingParameters.PurchaseEvent",
                  "wix-window.trackingParameters.RemoveFromCartEvent",
                  "wix-window.trackingParameters.ViewContentEvent" ],
              "doc": "The event's parameters." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "filename": "window.es6",
              "lineno": 909 } ],
        "docs":
          { "summary": "Sends a tracking event to external analytics tools.",
            "description":
              [ "The `trackEvent()` function sends an event to analytics tools connected",
                " to your site. It can send events to Google Analytics and Facebook Pixel.",
                " To learn how to connect analytics tools to your site, see",
                " [About Tracking Tools & Analytics](https://support.wix.com/en/article/about-tracking-tools-analytics).",
                "",
                " The following events and parameters are available:",
                "",
                " + `\"AddProductImpression\"`: [parameters](wix-window.trackingParameters.html#AddProductImpressionEvent): When a user views a product. (Google Analytics only)",
                " + `\"ClickProduct\"`: [parameters](wix-window.trackingParameters.html#ClickProductEvent): When a user clicks on a product. (Google Analytics only)",
                " + `\"ViewContent\"`: [parameters](wix-window.trackingParameters.html#ViewContentEvent): When a key page is viewed.",
                " + `\"AddToCart\"`: [parameters](wix-window.trackingParameters.html#AddToCartEvent): When a user adds a product to the shopping cart.",
                " + `\"RemoveFromCart\"`: [parameters](wix-window.trackingParameters.html#RemoveFromCartEvent): When a user removes a product from the shopping cart. (Google Analytics only)",
                " + `\"InitiateCheckout\"`: [parameters](wix-window.trackingParameters.html#InitiateCheckoutEvent): When a user starts the checkout process.",
                " + `\"StartPayment\"`: [parameters](wix-window.trackingParameters.html#StartPaymentEvent): When a user starts the payment process. (Google Analytics only)",
                " + `\"AddPaymentInfo\"`: [parameters](wix-window.trackingParameters.html#AddPaymentInfoEvent): When a user saves payment information.",
                " + `\"CheckoutStep\"`: [parameters](wix-window.trackingParameters.html#CheckoutStepEvent): When a user completes a custom checkout step. (Google Analytics only)",
                " + `\"Purchase\"`: [parameters](wix-window.trackingParameters.html#PurchaseEvent): When the checkout process is complete.",
                " + `\"Lead\"`: When a user subscribes to a newsletter or submits a contact form.",
                " + `\"CustomEvent\"`: [parameters](wix-window.trackingParameters.html#CustomEvent): When a user performs an event not listed above." ],
            "links": [],
            "examples":
              [ { "title": "Send a trackEvent with parameters",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "wixWindow.trackEvent(\"ViewContent\", {",
                      "  \"origin\": \"My Sportswear Store\",",
                      "  \"id\": \"P12345\",",
                      "  \"name\": \"Really Fast Running Shoes\",",
                      "  \"category\": \"Apparel/Shoes\",",
                      "  \"price\": 120,",
                      "  \"currency\": \"USD\",",
                      "  \"brand\": \"SomeBrand\",",
                      "  \"variant\": \"Black\",",
                      "  \"position\": 1",
                      "} );" ],
                  "extra":
                    {  } },
                { "title": "Send a trackEvent that doesn't take any parameters",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "wixWindow.trackEvent(\"Lead\");" ],
                  "extra":
                    {  } },
                { "title": "Send a trackEvent from the onReady event handler",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "$w.onReady(function () {",
                      "  if(wixWindow.rendering.env === \"browser\") {",
                      "    wixWindow.trackEvent(\"ViewContent\", {",
                      "      \"origin\": \"My Sportswear Store\",",
                      "      \"id\": \"P12345\",",
                      "      \"name\": \"Really Fast Running Shoes\",",
                      "      \"category\": \"Apparel/Shoes\",",
                      "      \"price\": 120,",
                      "      \"currency\": \"USD\",",
                      "      \"brand\": \"SomeBrand\",",
                      "      \"variant\": \"Black\",",
                      "      \"position\": 1",
                      "    } );",
                      "  }",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "The `trackEvent()` function only runs on published versions of your site.\n It does not work when previewing your site." ] } } ],
  "callbacks": [],
  "messages":
    [ { "name": "OpenModalOptions",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 987 } ],
        "docs":
          { "summary": "An object used when opening a modal window.",
            "links":
              [ "[openModal( )](#openModal)" ],
            "examples":
              [ { "title": "Open a modal window",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.openModal(\"https://en.wikipedia.org/wiki/Wix.com\", {",
                      "  \"width\": 750,",
                      "  \"height\": 500",
                      "} );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "width",
              "type": "number",
              "doc": "Width of the modal window." },
            { "name": "height",
              "type": "number",
              "doc": "Height of the modal window." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "WindowSizeInfo",
        "locations":
          [ { "filename": "window.es6",
              "lineno": 321 } ],
        "docs":
          { "summary": "An object returned by the `getBoundingRect()` function that contains information about the window's size, the document's size, and the current scroll position.",
            "links":
              [ "[getBoundingRect( )](#getBoundingRect)" ],
            "examples":
              [ { "title": "Get information about the window",
                  "body":
                    [ "import wixWindow from 'wix-window';",
                      "",
                      "// ...",
                      "",
                      "wixWindow.getBoundingRect()",
                      "  .then( (windowSizeInfo) => {",
                      "    let windowHeight = windowSizeInfo.window.height;      // 565",
                      "    let windowWidth = windowSizeInfo.window.width;        // 1269",
                      "    let documentHeight = windowSizeInfo.document.height;  // 780",
                      "    let documentWidth = windowSizeInfo.document.width;    // 1269",
                      "    let scrollX = windowSizeInfo.scroll.x;                // 0",
                      "    let scrollY = windowSizeInfo.scroll.y;                // 120",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "window",
              "type": "Object",
              "doc": "An object with `height` and `width` key:value pairs containing the size of the viewable area of the current browser window." },
            { "name": "document",
              "type": "Object",
              "doc": "An object with `height` and `width` key:value pairs containing the size of the actual body of the page, which may be larger or smaller than the current window." },
            { "name": "scroll",
              "type": "Object",
              "doc": "An object with `x` and `y` key:value pairs containing the scroll offset of the page within the window from the top-left corner." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }