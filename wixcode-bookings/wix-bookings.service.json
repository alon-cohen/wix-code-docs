{ "name": "wix-bookings",
  "mixes": [],
  "labels": [],
  "location":
    { "filename": "bookings.js",
      "lineno": 4 },
  "docs":
    { "summary": "The wix-bookings module contains functionality for working with\n bookings from client-side code.",
      "description":
        [ "Using the Bookings API, you can build a customized bookings experience.",
          "",
          " To process bookings on your site, first set up your site to accept bookings",
          " as described in <a href=\"https://support.wix.com/en/article/about-wix-bookings\" target=\"_blank\">About Wix Bookings</a>.",
          "",
          " <h3 id=\"booking-lifecycle\">Typical Booking Lifecycle</h3>",
          "",
          " The following list outlines the data flow in a typical booking lifecycle:",
          "",
          " 1. Get a list of services from one of:",
          "    + A dataset connected to the **Bookings/Services** collection.",
          "    + A [query](wix-data.html#query) on the **Bookings/Services** collection.",
          " 1. A service is selected.",
          " 1. Call the [`getServiceAvailability()`](#getServiceAvailability) function",
          "    using the selected service's **Service ID** (`_id`) value. (Optionally,",
          "    you can pass a [`ServiceAvailabilityOptions`](#ServiceAvailabilityOptions)",
          "    object to change the limits on the slots that are returned.)",
          " 1. You can match the returned slots to their related staff member items using",
          "    the **Bookings/Staff** collection.",
          " 1. A slot is selected.",
          " 1. Gather values for the selected service's form fields, if there are any.",
          "    The list of form fields is found in the **form** property of the items",
          "    in the **Bookings/Services** collection.",
          " 1. Call the [`checkoutBooking()`](#checkoutBooking) function. Pass the `id`",
          "    of the selected slot, the values for the form fields, and the payment type.",
          "    + If the payment type is not free, a payment popup is presented for the user",
          "    to enter payment information, such as credit card information.",
          "    + If the payment type is free, or when the user finishes entering the payment",
          "    information, you receive a booking ID if the booking was successful,",
          "    or an error if the booking was not successful.",
          "",
          " To use the Bookings API, import `wixBookings` from the `wix-bookings` module:",
          "",
          "   ```javascript",
          "   import wixBookings from 'wix-bookings';",
          "   ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "checkoutBooking",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "bookingInfo",
              "type": "wix-bookings.BookingInfo",
              "doc": "Information about the slot to be booked." },
            { "name": "options",
              "type": "wix-bookings.PaymentOptions",
              "doc": "Information about the payment method and coupon codes.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-bookings.BookingResult" ] },
            "doc": "Fulfilled - Results of the booking checkout.\nRejected - Bookings error object." },
        "locations":
          [ { "filename": "bookings.js",
              "lineno": 155 } ],
        "docs":
          { "summary": "Books a service and processes payment for the service.",
            "description":
              [ "The `checkoutBooking()` function returns a Promise that resolves to a",
                " unique booking ID when the service is booked successfully.",
                "",
                " To understand how `checkoutBooking()` is used in a typical booking lifecycle,",
                " see [Typical Booking Lifecycle](wix-pay.html#booking-lifecycle).",
                "",
                " Call the `checkoutBooking()` with a [`BookingInfo`](#BookingInfo) object that",
                " contains the ID of the slot to book, values for all the form fields, and",
                " the number of spots to book.",
                "",
                " The form fields contain additional information required for the booking.",
                "",
                " If the service being checked out is not a free service, you also need to pass",
                " a [`PaymentOptions`](#PaymentOptions) object containg information about the",
                " method of payment and any coupon codes. If an online method of payment is specified,",
                " a payment popup is presented for the user to input payment information, such",
                " as credit card information. The function's returned Promise resolves after the",
                " user finishes entering the payment information and the service has been successfully",
                " booked. If no payment or an offline method of payment is specified, the payment",
                " popup is not presented and the Promise resolves when the service has been",
                " successfully booked.",
                "",
                " When a service is booked successfully:",
                "",
                " + A contact is created with the provided booking information.",
                " + An email is sent to you about the new booking.",
                " + An email is sent to the user confirming that the service was booked." ],
            "links": [],
            "examples":
              [ { "title": "Book a service",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"bookingFields\": formFieldValues",
                      "};",
                      "",
                      "wixBookings.checkoutBooking(bookingInfo)",
                      "  .then( (results) => {",
                      "    let id = results.bookingID;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Book a service with payment options",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"bookingFields\": formFieldValues",
                      "};",
                      "",
                      "let options = {",
                      "  \"paymentType\": {",
                      "    \"type\": \"wixPay\"",
                      "  },",
                      "  \"couponCode\": \"thecouponcode\"",
                      "}",
                      "",
                      "wixBookings.checkoutBooking(bookingInfo, options)",
                      "  .then( (results) => {",
                      "    let id = results.bookingID;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "A full bookings scenario",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "import wixBookings from 'wix-bookings';",
                      "",
                      "let formFields;   // form fields the selected service requires",
                      "let selectedSlot; // service slot that was selected",
                      "",
                      "// When the page loads, query for all services and use the",
                      "// results to set the service repeater's data.",
                      "$w.onReady(function () {",
                      "  wixData.query(\"Bookings/Services\")",
                      "    .find()",
                      "    .then( (results) => {",
                      "      $w('#serviceRepeater').data = results.items;",
                      "    } );",
                      "});",
                      "",
                      "// When the service repeater's data is set, populate its items",
                      "// with the service data.",
                      "export function serviceRepeater_itemReady($item, itemData, index) {",
                      "  $item(\"#serviceName\").text = itemData.serviceName;",
                      "  $item(\"#tagLine\").text = itemData.tagLine;",
                      "  $item(\"#image\").src = itemData.imageURL;",
                      "}",
                      "",
                      "// When a service is selected, store its form fields for later,",
                      "// get the service's available slots, and use the results to set",
                      "// the slot repeater's data.",
                      "export function serviceRepeaterContainer_click(event) {",
                      "  $w(\"#serviceRepeater\").forItems([event.context.itemId], ($item, itemData, index) => {",
                      "    formFields = itemData.form.fields;",
                      "  } );",
                      "",
                      "  wixBookings.getServiceAvailability(event.context.itemId)",
                      "    .then( (availability) => {",
                      "      let slotId = 0;",
                      "      availability.slots.forEach( (slot) => {",
                      "        slot._id = \"slot\" + slotId++;",
                      "      } );",
                      "",
                      "      $w('#slotRepeater').data = availability.slots;",
                      "    } );",
                      "}",
                      "",
                      "// When the slot repeater's data is set, populate its items",
                      "// with the slot data.",
                      "export function slotRepeater_itemReady($item, itemData, index) {",
                      "  let date = new Date(itemData.startDateTime)",
                      "  $item(\"#dateText\").text = date.toLocaleDateString();",
                      "  $item(\"#timeText\").text = date.toLocaleTimeString();",
                      "}",
                      "",
                      "// When a slot is selected, store it for later, use the stored form",
                      "// fields to set form field repeater's data.",
                      "export function slotRepeateContainer_click(event) {",
                      "  $w(\"#slotRepeater\").forItems([event.context.itemId], ($item, itemData, index) => {",
                      "    selectedSlot = itemData;",
                      "  } );",
                      "",
                      "  let fieldId = 0;",
                      "",
                      "  formFields.forEach( (field) => {",
                      "    field._id = \"field\" + fieldId++;",
                      "  } );",
                      "",
                      "  $w('#formFieldRepeater').data = formFields;",
                      "}",
                      "",
                      "// When the form field repeater's data is set, populate its items",
                      "// with the form fields.",
                      "export function formFieldRepeater_itemReady($item, itemData, index) {",
                      "  $item(\"#fieldInput\").placeholder = itemData.label;",
                      "}",
                      "",
                      "// When the booking button is clicked, grab the form field values,",
                      "// build the bookingInfo object, and perform a booking checkout.",
                      "export function bookButton_click(event) {",
                      "  let formFieldValues = [];",
                      "",
                      "  $w('#formFieldRepeater').forEachItem( ($item, itemData, index) => {",
                      "    formFieldValues.push({",
                      "      \"id\": itemData.id,",
                      "      \"value\": $item(\"#fieldInput\").value",
                      "    });",
                      "  } );",
                      "",
                      "  let bookingInfo = {",
                      "    \"slot\": selectedSlot,",
                      "    \"bookingFields\": formFieldValues",
                      "  };",
                      "",
                      "  wixBookings.checkoutBooking(bookingInfo)",
                      "        .then( (results) => {",
                      "            $w('#confirmationText').text = `Booking ID: ${results.bookingID} Status: ${results.status}`;",
                      "        } );",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This examples demonstrates a simple bookings scenario. In the interest of\n simplicity the code does deal with display considerations or validations\n that would normally be required to make sure users perform the flow as\n intended.\n The code assumes a page with the following elements:\n\n + `serviceRepeater`: Displays the services that can be booked. The\n   elements in the repeater match the information we want to display\n   for each service.\n + `slotRepeater`: Displays the slots that are available for the selected\n   service. The elements in the repeater match the information we want to\n   display for each slot.\n + `formFieldRepeater`: Contains input fields for collecting form field values\n   needed to book the selected service. Each item contains one input element.\n + `bookButton`: Perfoms a booking checkout after a service and slot are selected\n   and the form fields have been entered." } } ],
            "extra":
              {  } },
        "extra":
          { "notes":
              [ "You can checkout bookings for 1-on-1 Sessions from any type of Wix account.\n To checkout bookings for Ongoing Sessions or a Set of Sessions you need to\n <a href=\"https://support.wix.com/en/article/upgrading-wix-bookings\" target=\"_blank\">upgrade to a Business Premium Plan</a>." ] } },
      { "name": "getServiceAvailability",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "serviceId",
              "type": "string",
              "doc": "The ID of the service for which to check slot availability." },
            { "name": "options",
              "type": "wix-bookings.AvailabilityOptions",
              "doc": "Options that refine which slots should be returned.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-bookings.ServiceAvailability" ] },
            "doc": "Fulfilled - A list of available slots.\nRejected - Bookings error object." },
        "locations":
          [ { "filename": "bookings.js",
              "lineno": 222 } ],
        "docs":
          { "summary": "Gets the available slots for a specific service.",
            "description":
              [ "The `getServiceAvailability()` function returns a Promise that resolves to a",
                " list of slots from the given service that have open spots, and can therefore",
                " still be booked.",
                "",
                " Service availability means different things for the different <a href=\"https://support.wix.com/en/article/creating-the-right-booking-service-for-your-business\" target=\"_blank\">service types</a>:",
                "",
                " + **1-on-1 Sessions**: See <a href=\"https://support.wix.com/en/article/setting-availability-for-1-on-1-sessions-in-wix-bookings\" target=\"_blank\">here</a>",
                "   to understand what affects the availability of a 1-on-1 session. A 1-on-1",
                "   session is returned as available if it meets the conditions outlined in the",
                "   article linked above and the session slot's time falls within the time specified by the",
                "   `AvailabilityOptions` or within the default time frame if no options are specified.",
                " + **Ongoing Sessions**: An ongoing session slot is returned as available if the slot's",
                "   time falls within the time specified by the `AvailabilityOptions` or within",
                "   the default time frame if no options are specified.",
                " + **Set of Sessions**: The first session slot from a set of sessions is returned",
                "   as available if the first session slot's time falls within the time specified by the",
                "   `AvailabilityOptions` or within the default time frame if no options are specified.",
                "",
                " To understand how `getServiceAvailability()` is used in a typical booking lifecycle,",
                " see [Typical Booking Lifecycle](wix-pay.html#booking-lifecycle).",
                "",
                " The passed `serviceId` must be an ID from your site's **Bookings/Services**",
                " collection. Typically, you retrieve the ID from from the collection using a",
                " query or through a dataset.",
                "",
                " Optionally, you can pass an [`AvailabilityOptions`](#AvailabilityOptions)",
                " object that defines a date range for which slots should be returned. If you",
                " do not pass an an [`AvailabilityOptions`](#AvailabilityOptions) object, the",
                " default date range is from the date and time the function is called until one",
                " week later." ],
            "links": [],
            "examples":
              [ { "title": "Get the available slots for a service",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let sessionId = // get session ID",
                      "",
                      "wixBookings.getServiceAvailability(sessionId)",
                      "  .then( (availability) => {",
                      "    let slots = availability.slots;",
                      "    let firstSlot = slots[0];",
                      "  } );",
                      "",
                      "/* firstSlot:",
                      " * {",
                      " *   \"id\": \"eyIjoxN2xhc3NJbnN0YW5jZUlkIjoiNjc4ZDYyMzItZ\",",
                      " *   \"startDateTime\": \"2018-11-20T08:00:00Z\",",
                      " *   \"endDateTime\": \"2018-11-20T09:00:00Z\",",
                      " *   \"serviceId\": \"a642caa6-1aba-4aa4-9f07-5aed39fbd3ba\",",
                      " *   \"capacity\": 20,",
                      " *   \"remainingSpots\": 20,",
                      " *   \"staffMemberId\": \"5a55aa7c-8e5d-488a-8191-7d430f2cdcc2\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "Get the available slots for a service for a specific date range",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let sessionId = // get session ID",
                      "let startRange = // get start datetime of range",
                      "let endRange = // get end datetime of range",
                      "",
                      "let options = {",
                      "  startDateTime: startRange,",
                      "  endDateTime: endRange",
                      "};",
                      "",
                      "wixBookings.getServiceAvailability(sessionId, options)",
                      "  .then( (availability) => {",
                      "    let slots = availability.slots;",
                      "    let firstSlot = slots[0];",
                      "  } );",
                      "",
                      "/* firstSlot:",
                      " * {",
                      " *   \"id\": \"eyIjoxN2xhc3NJbnN0YW5jZUlkIjoiNjc4ZDYyMzItZ\",",
                      " *   \"startDateTime\": \"2018-11-20T08:00:00Z\",",
                      " *   \"endDateTime\": \"2018-11-20T09:00:00Z\",",
                      " *   \"serviceId\": \"a642caa6-1aba-4aa4-9f07-5aed39fbd3ba\",",
                      " *   \"capacity\": 20,",
                      " *   \"remainingSpots\": 20,",
                      " *   \"staffMemberId\": \"5a55aa7c-8e5d-488a-8191-7d430f2cdcc2\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } },
                { "title": "A full bookings scenario",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "import wixBookings from 'wix-bookings';",
                      "",
                      "let formFields;   // form fields the selected service requires",
                      "let selectedSlot; // service slot that was selected",
                      "",
                      "// When the page loads, query for all services and use the",
                      "// results to set the service repeater's data.",
                      "$w.onReady(function () {",
                      "  wixData.query(\"Bookings/Services\")",
                      "    .find()",
                      "    .then( (results) => {",
                      "      $w('#serviceRepeater').data = results.items;",
                      "    } );",
                      "});",
                      "",
                      "// When the service repeater's data is set, populate its items",
                      "// with the service data.",
                      "export function serviceRepeater_itemReady($item, itemData, index) {",
                      "  $item(\"#serviceName\").text = itemData.serviceName;",
                      "  $item(\"#tagLine\").text = itemData.tagLine;",
                      "  $item(\"#image\").src = itemData.imageURL;",
                      "}",
                      "",
                      "// When a service is selected, store its form fields for later,",
                      "// get the service's available slots, and use the results to set",
                      "// the slot repeater's data.",
                      "export function serviceRepeaterContainer_click(event) {",
                      "  $w(\"#serviceRepeater\").forItems([event.context.itemId], ($item, itemData, index) => {",
                      "    formFields = itemData.form.fields;",
                      "  } );",
                      "",
                      "  wixBookings.getServiceAvailability(event.context.itemId)",
                      "    .then( (availability) => {",
                      "      let slotId = 0;",
                      "      availability.slots.forEach( (slot) => {",
                      "        slot._id = \"slot\" + slotId++;",
                      "      } );",
                      "",
                      "      $w('#slotRepeater').data = availability.slots;",
                      "    } );",
                      "}",
                      "",
                      "// When the slot repeater's data is set, populate its items",
                      "// with the slot data.",
                      "export function slotRepeater_itemReady($item, itemData, index) {",
                      "  let date = new Date(itemData.startDateTime)",
                      "  $item(\"#dateText\").text = date.toLocaleDateString();",
                      "  $item(\"#timeText\").text = date.toLocaleTimeString();",
                      "}",
                      "",
                      "// When a slot is selected, store it for later, use the stored form",
                      "// fields to set form field repeater's data.",
                      "export function slotRepeateContainer_click(event) {",
                      "  $w(\"#slotRepeater\").forItems([event.context.itemId], ($item, itemData, index) => {",
                      "    selectedSlot = itemData;",
                      "  } );",
                      "",
                      "  let fieldId = 0;",
                      "",
                      "  formFields.forEach( (field) => {",
                      "    field._id = \"field\" + fieldId++;",
                      "  } );",
                      "",
                      "  $w('#formFieldRepeater').data = formFields;",
                      "}",
                      "",
                      "// When the form field repeater's data is set, populate its items",
                      "// with the form fields.",
                      "export function formFieldRepeater_itemReady($item, itemData, index) {",
                      "  $item(\"#fieldInput\").placeholder = itemData.label;",
                      "}",
                      "",
                      "// When the booking button is clicked, grab the form field values,",
                      "// build the bookingInfo object, and perform a booking checkout.",
                      "export function bookButton_click(event) {",
                      "  let formFieldValues = [];",
                      "",
                      "  $w('#formFieldRepeater').forEachItem( ($item, itemData, index) => {",
                      "    formFieldValues.push({",
                      "      \"id\": itemData.id,",
                      "      \"value\": $item(\"#fieldInput\").value",
                      "    });",
                      "  } );",
                      "",
                      "  let bookingInfo = {",
                      "    \"slot\": selectedSlot,",
                      "    \"bookingFields\": formFieldValues",
                      "  };",
                      "",
                      "  wixBookings.checkoutBooking(bookingInfo)",
                      "        .then( (results) => {",
                      "            $w('#confirmationText').text = `Booking ID: ${results.bookingID} Status: ${results.status}`;",
                      "        } );",
                      "}",
                      "" ],
                  "extra":
                    { "description": "This examples demonstrates a simple bookings scenario. In the interest of\n simplicity the code does deal with display considerations or validations\n that would normally be required to make sure users perform the flow as\n intended.\n The code assumes a page with the following elements:\n\n + `serviceRepeater`: Displays the services that can be booked. The\n   elements in the repeater match the information we want to display\n   for each service.\n + `slotRepeater`: Displays the slots that are available for the selected\n   service. The elements in the repeater match the information we want to\n   display for each slot.\n + `formFieldRepeater`: Contains input fields for collecting form field values\n   needed to book the selected service. Each item contains one input element.\n + `bookButton`: Perfoms a booking checkout after a service and slot are selected\n   and the form fields have been entered." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "AvailabilityOptions",
        "locations":
          [ { "filename": "bookings.js",
              "lineno": 48 } ],
        "docs":
          { "summary": "An object used when calling [`getServiceAvailability()`](#getServiceAvailability)\n containing options for which slots should be returned.",
            "links": [],
            "examples":
              [ { "title": "Get the available slots for a service for a specific date range",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let sessionId = // get session ID",
                      "let startRange = // get start datetime of range",
                      "let endRange = // get end datetime of range",
                      "",
                      "let options = {",
                      "  startDateTime: startRange,",
                      "  endDateTime: endRange",
                      "};",
                      "",
                      "wixBookings.getServiceAvailability(sessionId, options)",
                      "  .then( (availability) => {",
                      "    let slots = availability.slots;",
                      "    let firstSlot = slots[0];",
                      "  } );",
                      "",
                      "/* firstSlot:",
                      " * {",
                      " *   \"id\": \"eyIjoxN2xhc3NJbnN0YW5jZUlkIjoiNjc4ZDYyMzItZ\",",
                      " *   \"startDateTime\": \"2018-11-20T08:00:00Z\",",
                      " *   \"endDateTime\": \"2018-11-20T09:00:00Z\",",
                      " *   \"serviceId\": \"a642caa6-1aba-4aa4-9f07-5aed39fbd3ba\",",
                      " *   \"capacity\": 20,",
                      " *   \"remainingSpots\": 20,",
                      " *   \"staffMemberId\": \"5a55aa7c-8e5d-488a-8191-7d430f2cdcc2\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "startDateTime",
              "type": "string",
              "doc": "Start date and time of the slots\n to be returned. Defaults to the current date and time.",
              "optional": true },
            { "name": "endDateTime",
              "type": "string",
              "doc": "End date and time of the slots to\n be returned. Defaults to one week from `startDateTime`, which is one week\n from the current date and time if `startDateTime` is also omitted.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "BookingInfo",
        "locations":
          [ { "filename": "bookings.js",
              "lineno": 81 } ],
        "docs":
          { "summary": "An object used when calling [`checkoutBooking()`](#checkoutBooking)\n containing information about the slot to be booked.",
            "links": [],
            "examples":
              [ { "title": "Book a service",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"bookingFields\": formFieldValues",
                      "};",
                      "",
                      "wixBookings.checkoutBooking(bookingInfo)",
                      "  .then( (results) => {",
                      "    let id = results.bookingID;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "slot",
              "type": "wix-bookings.Slot",
              "doc": "The slot to be booked." },
            { "name": "bookingFields",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-bookings.FormField" ] },
              "doc": "List of form field values required to book the session." },
            { "name": "numberOfSpots",
              "type": "number",
              "doc": "Number of spots to book. Defaults to `1`.",
              "optional": true } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "BookingResult",
        "locations":
          [ { "filename": "bookings.js",
              "lineno": 117 } ],
        "docs":
          { "summary": "An object representing the result of a call to [`checkoutBooking()`](#checkoutBooking).",
            "links": [],
            "examples":
              [ { "title": "Book a service with payment options",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"bookingFields\": formFieldValues",
                      "};",
                      "",
                      "let options = {",
                      "  \"paymentType\": {",
                      "    \"type\": \"wixPay\"",
                      "  },",
                      "  \"couponCode\": \"thecouponcode\"",
                      "}",
                      "",
                      "wixBookings.checkoutBooking(bookingInfo, options)",
                      "  .then( (results) => {",
                      "    let id = results.bookingID;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "bookingID",
              "type": "string",
              "doc": "ID of the booking that was checked out." },
            { "name": "status",
              "type": "string",
              "doc": "Status of the booking that was checked out.\n One of:\n\n + `\"Confirmed\"`: Payment was successful or payment is to be done offline.\n + `\"Pending Payment\"`: Payment is pending.\n + `\"Terminated\"`: Payment failed or was cancelled." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Error",
        "locations":
          [ { "filename": "bookings.js",
              "lineno": 130 } ],
        "docs":
          { "summary": "An object representing a booking error.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "code",
              "type": "string",
              "doc": "Error code." },
            { "name": "message",
              "type": "string",
              "doc": "Error message." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "FormField",
        "locations":
          [ { "filename": "bookings.js",
              "lineno": 91 } ],
        "docs":
          { "summary": "An object used when calling [`checkoutBooking()`](#checkoutBooking)\n containing values for form fields required to book the session.",
            "links": [],
            "examples":
              [ { "title": "Book a service",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"bookingFields\": formFieldValues",
                      "};",
                      "",
                      "wixBookings.checkoutBooking(bookingInfo)",
                      "  .then( (results) => {",
                      "    let id = results.bookingID;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "id",
              "type": "string",
              "doc": "ID of the form field from the **form** property in the **Booking/Sessions** collection." },
            { "name": "value",
              "type": "string",
              "doc": "Form field value." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "PaymentOptions",
        "locations":
          [ { "filename": "bookings.js",
              "lineno": 100 } ],
        "docs":
          { "summary": "An object used when calling [`checkoutBooking()`](#checkoutBooking)\n containing information about the payment options.",
            "links": [],
            "examples":
              [ { "title": "Book a service with payment options",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"bookingFields\": formFieldValues",
                      "};",
                      "",
                      "let options = {",
                      "  \"paymentType\": {",
                      "    \"type\": \"wixPay\"",
                      "  },",
                      "  \"couponCode\": \"thecouponcode\"",
                      "}",
                      "",
                      "wixBookings.checkoutBooking(bookingInfo, options)",
                      "  .then( (results) => {",
                      "    let id = results.bookingID;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "paymentType",
              "type": "wix-bookings.PaymentType",
              "doc": "Type of the payment." },
            { "name": "couponCode",
              "type": "string",
              "doc": "A coupon code to be used with the payment." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "PaymentType",
        "locations":
          [ { "filename": "bookings.js",
              "lineno": 109 } ],
        "docs":
          { "summary": "An object representing a type of payment.",
            "links": [],
            "examples":
              [ { "title": "Book a service with payment options",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let chosenSlot = // get chosen slot",
                      "",
                      "let formFieldValues = [",
                      "  {",
                      "    \"id\": \"20657271-c55f-43d6-adfd-39b7acc38e11\", // name field ID",
                      "    \"value\": \"John Doe\"",
                      "  }, {",
                      "    \"id\": \"87edd4e0-42b1-4802-8766-584f3eeb6436\", // email field ID",
                      "    \"value\": \"john@doe.com\"",
                      "  }",
                      "];",
                      "",
                      "let bookingInfo = {",
                      "  \"slot\": chosenSlot,",
                      "  \"bookingFields\": formFieldValues",
                      "};",
                      "",
                      "let options = {",
                      "  \"paymentType\": {",
                      "    \"type\": \"wixPay\"",
                      "  },",
                      "  \"couponCode\": \"thecouponcode\"",
                      "}",
                      "",
                      "wixBookings.checkoutBooking(bookingInfo, options)",
                      "  .then( (results) => {",
                      "    let id = results.bookingID;",
                      "    let status = results.status;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "type",
              "type": "string",
              "doc": "Type of the payment. Either `\"wixPay\"` for\n online collection, or `\"offline\"` for offline collection." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "ServiceAvailability",
        "locations":
          [ { "filename": "bookings.js",
              "lineno": 60 } ],
        "docs":
          { "summary": "An object returned from [`getServiceAvailability()`](#getServiceAvailability)\n containing the available bookings slots.",
            "links": [],
            "examples":
              [ { "title": "Get the available slots for a service",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let sessionId = // get session ID",
                      "",
                      "wixBookings.getServiceAvailability(sessionId)",
                      "  .then( (availability) => {",
                      "    let slots = availability.slots;",
                      "    let firstSlot = slots[0];",
                      "  } );",
                      "",
                      "/* firstSlot:",
                      " * {",
                      " *   \"id\": \"eyIjoxN2xhc3NJbnN0YW5jZUlkIjoiNjc4ZDYyMzItZ\",",
                      " *   \"startDateTime\": \"2018-11-20T08:00:00Z\",",
                      " *   \"endDateTime\": \"2018-11-20T09:00:00Z\",",
                      " *   \"serviceId\": \"a642caa6-1aba-4aa4-9f07-5aed39fbd3ba\",",
                      " *   \"capacity\": 20,",
                      " *   \"remainingSpots\": 20,",
                      " *   \"staffMemberId\": \"5a55aa7c-8e5d-488a-8191-7d430f2cdcc2\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "slots",
              "type":
                { "name": "Array",
                  "typeParams":
                    [ "wix-bookings.Slot" ] },
              "doc": "List of available slots." } ],
        "extra":
          {  },
        "labels": [] },
      { "name": "Slot",
        "locations":
          [ { "filename": "bookings.js",
              "lineno": 68 } ],
        "docs":
          { "summary": "An object representing a booking slot.",
            "links": [],
            "examples":
              [ { "title": "Get the available slots for a service",
                  "body":
                    [ "import wixBookings from 'wix-bookings';",
                      "",
                      "// ...",
                      "",
                      "let sessionId = // get session ID",
                      "",
                      "wixBookings.getServiceAvailability(sessionId)",
                      "  .then( (availability) => {",
                      "    let slots = availability.slots;",
                      "    let firstSlot = slots[0];",
                      "  } );",
                      "",
                      "/* firstSlot:",
                      " * {",
                      " *   \"id\": \"eyIjoxN2xhc3NJbnN0YW5jZUlkIjoiNjc4ZDYyMzItZ\",",
                      " *   \"startDateTime\": \"2018-11-20T08:00:00Z\",",
                      " *   \"endDateTime\": \"2018-11-20T09:00:00Z\",",
                      " *   \"serviceId\": \"a642caa6-1aba-4aa4-9f07-5aed39fbd3ba\",",
                      " *   \"capacity\": 20,",
                      " *   \"remainingSpots\": 20,",
                      " *   \"staffMemberId\": \"5a55aa7c-8e5d-488a-8191-7d430f2cdcc2\"",
                      " * }",
                      " */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "id",
              "type": "string",
              "doc": "Unique slot identifier." },
            { "name": "startDateTime",
              "type": "string",
              "doc": "Starting date and time of the slot." },
            { "name": "endDateTime",
              "type": "string",
              "doc": "Ending date and time of the slot." },
            { "name": "serviceId",
              "type": "string",
              "doc": "ID of the service that the slot belongs to." },
            { "name": "capacity",
              "type": "number",
              "doc": "Maximum number of participants that can book the service for this slot." },
            { "name": "remainingSpots",
              "type": "number",
              "doc": "Number of remaining spots that can be booked for the slot." },
            { "name": "staffMemberId",
              "type": "string",
              "doc": "ID of the slot's staff member." } ],
        "extra":
          {  },
        "labels": [] } ],
  "extra":
    {  } }