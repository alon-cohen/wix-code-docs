{ "name": "WixDataQuery",
  "memberOf": "wix-data",
  "mixes": [],
  "labels": [],
  "location":
    { "filename": "query.es6",
      "lineno": 13 },
  "docs":
    { "summary": "Contains functionality for refining a data query.",
      "description":
        [ "The `WixDataQuery` functions enable you to run, sort, filter, and control",
          " which results a query returns.",
          "",
          " Typically, you build a query using the [`query()`](#wix-data.html#query) function,",
          " refine the query by chaining `WixDataQuery` functions, and then execute the",
          " query by chaining the [`find()`](#find) or [`count()`](#count) functions.",
          "",
          " For example, the following code queries a collection for all male customers",
          " over the age of 20 and logs the first 15 results to the console, sorted in",
          " ascending order by name:",
          "",
          " ```javascript",
          " import wixData from 'wix-data';",
          "",
          " wixData.query(\"Customer\")",
          "   .gt(\"age\", 20)",
          "   .ascending(\"name\")",
          "   .limit(15)",
          "   .find()",
          "   .then( (results) => {",
          "     console.log(results.items);",
          "   } );",
          " ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "and",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-data.WixDataQuery",
              "doc": "A query to add to the initial query as an `and` condition." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 492 } ],
        "docs":
          { "summary": "Adds an `and` condition to the query or filter.",
            "description":
              [ "The `and()` function adds an `and` condition to a `WixDataQuery` or `WixDataFilter`.",
                " A query or filter with an `and` returns all the items that match the query",
                " or filter as defined up to the `and` function and also match the query or",
                " filter passed to the `and` function.",
                "",
                " Note that when chaining multiple `WixDataFilter` functions to a query an `add` condition is assumed.",
                " In such cases, you do not need to add a call to the `and()` function.",
                " For example, this query returns results where status is active **and** age is",
                " greater than 25.",
                "",
                " ```javascript",
                " wixData.query(\"myCollection\")",
                "   .eq(\"status\", \"active\")",
                "   .gt(\"age\", 25);",
                " ```",
                "",
                " The `and()` function, is needed when perfoming compound queries. For",
                " example, the final query in this set of queries returns results where status",
                " is either pending or rejected **and** age is either less than 25 or greater than 65.",
                "",
                " ```javascript",
                " let statusQuery = wixData.query(\"myCollection\")",
                "   .eq(\"status\", \"pending\")",
                "   .or(",
                "     wixData.query(\"myCollection\")",
                "       .eq(\"status\", \"rejected\")",
                "   );",
                "",
                " let ageQuery = wixData.query(\"myCollection\")",
                "   .lt(\"age\", 25)",
                "   .or(",
                "     wixData.query(\"myCollection\")",
                "       .gt(\"age\", 65)",
                "   );",
                "",
                " let statusAndAgeQuery = statusQuery.and(ageQuery);",
                " ```",
                "",
                " The collections referenced by both the initial query and the query passed",
                " to the `and` function must be the same.",
                "",
                " If the query or filter only contains an `and()` function, it returns all the items in the collection." ],
            "links": [],
            "examples":
              [ { "title": "Add an and to a query",
                  "body":
                    [ "let newQuery = query1.and(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an or, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let statusQuery = wixData.query(\"myCollection\")",
                      "  .eq(\"status\", \"pending\")",
                      "  .or(",
                      "    wixData.query(\"myCollection\")",
                      "      .eq(\"status\", \"rejected\")",
                      "  );",
                      "",
                      "let ageQuery = wixData.query(\"myCollection\")",
                      "  .lt(\"age\", 25)",
                      "  .or(",
                      "    wixData.query(\"myCollection\")",
                      "      .gt(\"age\", 65)",
                      "  );",
                      "",
                      "statusQuery.and(ageQuery)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );",
                      "",
                      "  /*",
                      "   * For example, results contain items where age is:",
                      "   * 18",
                      "   * 21",
                      "   * 67",
                      "   * 90",
                      "   *",
                      "   * But not items where age is:",
                      "   * 25",
                      "   * 30",
                      "   * 40",
                      "   * 65",
                      "   */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ascending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.",
              "spread": true } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "sortMixin.es6",
              "lineno": 19 } ],
        "docs":
          { "summary": "Adds a sort to a query or sort, sorting by the specified properties in ascending order.",
            "description":
              [ "The `ascending()` function refines a `WixDataQuery` or `WixDataSort` to sort in ascending order of",
                " the specified properties. If you specify more than one property,",
                " `ascending()` sorts the results in ascending order by each property in the",
                " order they are listed.",
                "",
                " You can sort the following types:",
                "",
                " + Number: Sorts numerically.",
                " + Date: Sorts by date and time.",
                " + String: Sorts lexicographically, so `\"abc\"` comes after `\"XYZ\"`.",
                " + Reference: Compares by the ID of the referenced item as a String.",
                "",
                "",
                " If a property contains a number as a String, that value will be sorted",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add an ascending sort to a query",
                  "body":
                    [ "let newQuery = query.ascending(\"last_name\", \"first_name\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an ascending sort, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an ascending sort, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .eq(\"status\", \"active\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "between",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `rangeStart` and `rangeEnd`." },
            { "name": "rangeStart",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The beginning value of the range to match against." },
            { "name": "rangeEnd",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The ending value of the range to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 602 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is within a specified range.",
            "description":
              [ "The `between()` function refines a `WixDataQuery` or `WixDataFilter` to only",
                " match items where the value of the specified property is greater than or equal",
                " to `rangeStart` and less than `rangeEnd`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so",
                "   + `\"A\"` and `\"M\"` are between `\"A\"` and `\"Z\"`, but `\"a\"`, `\"m\"`, `\"z\"` and `\"Z\"` are not.",
                "   + `\"A\"`, `\"M\"`, `\"Z\"`, `\"a\"`, and `\"z\"` are between `\"A\"` and `\"z\"`, but `\"z\"` is not." ],
            "links": [],
            "examples":
              [ { "title": "Add a between filter to a query",
                  "body":
                    [ "let newQuery = query.between(\"age\", 25, 65);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a between filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .between(\"age\", 25, 65)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a between filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .between(\"age\", 25, 65)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "contains",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string." },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for inside the specified property value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 351 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value contains a specified string.",
            "description":
              [ "The `contains()` function refines a `WixDataQuery` or `WixDataFilter` to",
                " only match items where the value of the specified property contains the",
                " specified `string`. Matching with `contains()` is not case sensitve, so",
                " `\"text\"` does contain `\"Tex\"`.",
                "",
                " You can use `contains()` with a property whose value is a String or a Reference.",
                " For properties of type reference it is recommended that you use the [`eq()`](#eq)",
                " function instead of `contains()`. With properties that are References, `contains()`",
                " matches by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a contains filter to a query",
                  "body":
                    [ "let newQuery = query.contains(\"description\", \"some words\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a contains filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .contains(\"description\", \"some words\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a contains filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .contains(\"description\", \"some words\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "count",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "number" ] },
            "doc": "Fulfilled - The number of items that match the query.\nRejected - The errors that caused the rejection." },
        "locations":
          [ { "filename": "query.es6",
              "lineno": 76 } ],
        "docs":
          { "summary": "Returns the number of items that match the query.",
            "description":
              [ "The `count()` function returns a Promise that resolves to the number of",
                " items that match the query. The Promise is rejected if `count()` is called",
                " with incorrect permissions or if any of the functions used to refine the",
                " query is invalid.",
                "",
                " Calling the `count()` function triggers the [`beforeCount()`](wix-data.Hooks.html#beforeCount)",
                " and [`afterCount()`](wix-data.Hooks.html#afterCount) hooks if they have been defined.",
                "",
                " Use the `options` parameter to run `count()` without checking for permissions",
                " or without its registered hooks.",
                "",
                " Any function that does not filter query results (e.g., [`ascending()`](#ascending))",
                " does not affect the result of `count()`.",
                "",
                " If you build a query and don't refine it with any `WixDataQuery` functions,",
                " `count()` returns the total number of items in the collection.",
                "",
                " If you have already run a query with [`find()`](#find), you can retrieve",
                " the number of query results without calling `count()`. The [`find()`](#find)",
                " function returns a Promise that resolves to a [`WixDataQueryResult`](wix-data.WixDataQueryResult)",
                " object, which has a `totalCount` property whose value is the number of results." ],
            "links": [],
            "examples":
              [ { "title": "Perform a count on a query",
                  "body":
                    [ "query.count()",
                      "  .then( (num) => {",
                      "    let numberOfItems = num;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query and perfom a count on it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .count()",
                      "  .then( (num) => {",
                      "    let numberOfItems = num;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query and perfom a count on it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .eq(\"status\", \"active\")",
                      "  .gt(\"age\", 25)",
                      "  .count()",
                      "  .then( (num) => {",
                      "    let numberOfItems = num;",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "descending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.",
              "spread": true } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "sortMixin.es6",
              "lineno": 53 } ],
        "docs":
          { "summary": "Adds a sort to a query or sort, sorting by the specified properties in descending order.",
            "description":
              [ "The `descending()` function refines a `WixDataQuery` or `WixDataSort` to sort in descending order of",
                " the specified properties. If you specify more than one property,",
                " `descending()` sorts the results in descending order by each property in the",
                " order they are listed.",
                "",
                " You can sort the following types:",
                "",
                " + Number: Sorts numerically.",
                " + Date: Sorts by date and time.",
                " + String: Sorts lexicographically, so `\"abc\"` comes before `\"XYZ\"`.",
                " + Reference: Compares by the ID of the referenced item as a String.",
                "",
                "",
                " If a property contains a number as a String, that value will be sorted",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add an descending sort to a query",
                  "body":
                    [ "let newQuery = query.descending(\"last_name\", \"first_name\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an descending sort, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .descending(\"last_name\", \"first_name\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an descending sort, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .descending(\"last_name\", \"first_name\")",
                      "  .eq(\"status\", \"active\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "endsWith",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string." },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for at the beginning of the specified property value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 324 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value ends with a specified string.",
            "description":
              [ "The `endsWith()` function refines a `WixDataQuery` or `WixDataFilter` to only",
                " match items where the value of the specified property ends with the specified",
                "`string`. Matching with `endsWith()` is not case sensitve, so `\"TEXT\"` ends",
                " with `\"ext\"`.",
                "",
                " You can only use `endsWith()` with a property whose value is a String or Reference.",
                " When using a Reference, `endsWith()` matches by the ID of the referenced item as Strings." ],
            "links": [],
            "examples":
              [ { "title": "Add an ends with filter to a query",
                  "body":
                    [ "let newQuery = query.endsWith(\"last_name\", \"z\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an ends with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .endsWith(\"last_name\", \"z\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an ends with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .endsWith(\"last_name\", \"z\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "eq",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type": "*",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 20 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value equals the specified value.",
            "description":
              [ "The `eq()` function refines a `WixDataQuery` or `WixDataFilter` to only",
                " match items where the value of the specified property equals the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " Matching strings with `eq()` is case sensitve, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                " If the value of the `propertyName` property is an Array, `eq()` includes items",
                " in which any of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add an equals filter to a query",
                  "body":
                    [ "let newQuery = query.eq(\"status\", \"active\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .eq(\"status\", \"active\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .eq(\"status\", \"active\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "find",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataQueryResult" ] },
            "doc": "Fulfilled - A Promise that resolves to the results of the query.\nRejected - Error that caused the query to fail." },
        "locations":
          [ { "filename": "query.es6",
              "lineno": 181 } ],
        "docs":
          { "summary": "Returns the items that match the query.",
            "description":
              [ "The `find()` function returns a Promise that resolves to the results found",
                " by the query and some information about the results. The Promise is",
                " rejected if `find()` is called with incorrect permissions or if any of the",
                " functions used to refine the query is invalid.",
                "",
                " Calling the `find()` function triggers the [`beforeQuery()`](wix-data.Hooks.html#beforeQuery)",
                " and [`afterQuery()`](wix-data.Hooks.html#afterQuery) hooks if they have been defined.",
                " If the query being run contains an [`include()`](#include), calling `find()`",
                " triggers [`beforeQuery()`](wix-data.Hooks.html#beforeQuery) and",
                " [`afterQuery()`](wix-data.Hooks.html#afterQuery) hooks for the referenced",
                " collection as well.",
                "",
                " Use the `options` parameter to run `find()` without checking for permissions",
                " or without its registered hooks.",
                "",
                " If you build a query and don't refine it with any `wixDataQuery` functions,",
                " `find()` returns the entire collection." ],
            "links": [],
            "examples":
              [ { "title": "Perform a find on a query",
                  "body":
                    [ "query.find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to run a `find()` on a `query()` that was previously built and stored in a variable." } },
                { "title": "Create a query and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to build a `query()` and then run a `find()` on it." } },
                { "title": "Create a query, add functions to the query, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .eq(\"status\", \"active\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if (results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to build a `query()`, chain additional functions such as `eq()` and `gt()` to the query, and then run the `query()`." } },
                { "title": "Create a query with options and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "let options = {",
                      "    \"suppressAuth\": true,",
                      "    \"suppressHooks\": true",
                      "};",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .find(options)",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }    ",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to build a `query()` and then run a `find()` that bypasses permission checks and registered hooks.\n  Note that the `options` parameter can only be used in backend code." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ge",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 78 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is greater than or equal to the specified value.",
            "description":
              [ "The `ge()` function refines a `WixDataQuery` or `WixDataFilter` to only",
                " match items where the value of the specified property is greater than or",
                " equal to the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically,",
                "   so `\"abc\"` and is greater than or equal to `\"ABC\"` (because of the greater than),",
                "   but `\"ABC\"` is not greater than or equal to `\"abc\"`.",
                " + Reference: Compares by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a greater than or equals filter to a query",
                  "body":
                    [ "let newQuery = query.ge(\"age\", 25);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a greater than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ge(\"age\", 25)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a greater than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ge(\"age\", 25)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "gt",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object with the query definition, based on the supplied parameters." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 118 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is greater than the specified value.",
            "description":
              [ "The `gt()` function refines a `WixDataQuery` or `WixDataFilter` to only match",
                " items where the value of the specified property is greater than the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so `\"text\"` is greater than `\"Text\"`.",
                " + Reference: Compares by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a greater than filter to a query",
                  "body":
                    [ "let newQuery = query.gt(\"age\", 25);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a greater than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .gt(\"age\", 25)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a greater than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .gt(\"age\", 25)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasAll",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date",
                  "Array" ],
              "doc": "The values to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 421 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property values equals all of the specified `value` parameters.",
            "description":
              [ "The `hasAll()` function refines a `WixDataQuery` or `WixDataFilter` to",
                " only match items where the value of the specified property equals all of",
                " the specified values.",
                "",
                " Matching strings with `hasAll()` is case sensitve, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                " If the value of the specified property is an array, `hasAll()` will match",
                " if there is a match in the elements of that array for all of the specified",
                " values.",
                "",
                " You can specify a list of values to match by providing comma-separated",
                " String, Number, or Date types as the `value` parameters. You can also",
                " specify a list of these values by including them in an array and providing",
                " the array as the `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a has all filter to a query",
                  "body":
                    [ "let newQuery = query.hasAll(\"colors\", [\"red\", \"yellow\", \"blue\"]);",
                      "",
                      "// or",
                      "",
                      "let newQuery = query.hasAll(\"colors\", \"red\", \"yellow\", \"blue\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a has all filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .hasAll(\"colors\", [\"red\", \"yellow\", \"blue\"])",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a has all filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .hasAll(\"colors\", [\"red\", \"yellow\", \"blue\"])",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "hasSome",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date",
                  "Array" ],
              "doc": "The values to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 380 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value equals any of the specified `value` parameters.",
            "description":
              [ "The `hasSome()` function refines a `WixDataQuery` or `WixDataFilter` to",
                " only match items where the value of the specified property equals any of",
                " the specified values.",
                "",
                " Matching strings with `hasSome()` is case sensitve, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                " If the value of the specified property is an array, `hasSome()` will match",
                " if any of the elements of that array match any of the specified values.",
                "",
                " If the specified property contains multiple references, pass item IDs in the",
                " `value` property. In such a case, `hasSome()` will match if any of the",
                " multiple references match any of the specified ID values.",
                "",
                " You can specify a list of values to match by providing comma-separated",
                " String, Number, or Date types as the `value` parameters. You can also",
                " specify a list of these values by including them in an array and providing",
                " the array as the `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a has some filter to a query",
                  "body":
                    [ "let newQuery = query.hasSome(\"colors\", [\"red\", \"yellow\", \"blue\"]);",
                      "",
                      "// or",
                      "",
                      "let newQuery = query.hasSome(\"colors\", \"red\", \"yellow\", \"blue\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a has some filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .hasSome(\"colors\", [\"red\", \"yellow\", \"blue\"])",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a has some filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .hasSome(\"colors\", [\"red\", \"yellow\", \"blue\"])",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Add a has some filter on a multiple reference field to a query",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"movies\")",
                      "  .hasSome(\"actors\", [\"1357\", \"2468\"])",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );",
                      "" ],
                  "extra":
                    { "description": "This example gets the items from the **movies** collection that have a\n reference in the **authors** field to an item with an ID that is either\n **1357** or **2468**." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "include",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties for which to include referenced items.",
              "spread": true } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the query." },
        "locations":
          [ { "filename": "query.es6",
              "lineno": 338 } ],
        "docs":
          { "summary": "Includes referenced items for the specified properties in a query's results.",
            "description":
              [ "The `include()` function refines a query so that the items returned in the",
                " query's results include the full referenced items for the specified properties.",
                "",
                " For example, suppose you have a **books** collection with an **author**",
                " field that references an **authors** collection. Querying the **books**",
                " collection with an `include(\"author\")` returns the relevant book items",
                " and each item will include the full referenced author item in the book's",
                " `author` property.",
                "",
                " Querying a collection that contains reference fields without using the",
                " `include()` function returns items that contain only the ID of the",
                " referenced item, and not the full referenced items.",
                "",
                " When including a property with multiple references, the following limitations",
                " apply:",
                "",
                " + Only one property with multiple references can be included.",
                " + The query will return an error if more than 50 items are returned, regardless",
                "   of any query limit set using the [`limit()`](#limit) function.",
                " + Each returned item can include up to 50 referenced items. If there are more",
                "   than 50 referenced items, only 50 are returned when the query is run",
                "   and the [`partialIncludes`](wix-data.WixDataQueryResult.html#partialIncludes)",
                "   property of the returned [`WixDataQueryResult`](wix-data.WixDataQueryResult.html)",
                "   is `true`. To retrieve more than 50 referenced items, use the",
                "   [`queryReferenced()`](wix-data.html#queryReferenced) function." ],
            "links": [],
            "examples":
              [ { "title": "Add an include to a query",
                  "body":
                    [ "let newQuery = query.include(\"referenceField\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, include a reference field, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .include(\"referenceField\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let firstRefProp = firstItem.referenceField.propertyName;",
                      "",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, include a reference field, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"books\")",
                      "  .include(\"author\", \"publisher\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let books = results.items;",
                      "      let firstBook = items[0];",
                      "      let firstAuthor = firstBook.author;",
                      "      let firstAuthorBio = firstAuthor.bio;",
                      "      let firstPublisher = firstBook.publisher.name;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );",
                      "" ],
                  "extra":
                    { "description": "In this example there is a **books** collection which has two reference fields\n that reference an **authors** collection and a **publishers** collection.\n\n The query includes the **author** and **publisher** properties so that each\n returned book will also include the full items of its referenced author and\n publisher." } },
                { "title": "Create a query, include a reference field, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"books\")",
                      "  .eq(\"publisher\", \"00001\")",
                      "  .include(\"author\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let books = results.items;",
                      "      let firstBook = items[0];",
                      "      let firstAuthor = firstBook.author;",
                      "      let firstAuthorBio = firstAuthor.bio;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );",
                      "" ],
                  "extra":
                    { "description": "In this example there is a **books** collection which as two reference fields\n that reference an **authors** collection and a **publishers** collection.\n\n The query is refined to only include books from a specific publisher using\n the `eq()` function and the publisher's ID.\n\n The query also includes the **author** property so that each returned\n book will include the full item of its referenced author." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isEmpty",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The the property in which to check for a value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 264 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property does not exist or does not have any value.",
            "description":
              [ "The `isEmpty()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the",
                " value of the specified property is `null` or `undefined` or the property does",
                " not exist.",
                "",
                " If the property contains any value at all for a given item, including the",
                " empty string or an invalid value, that item will match the query." ],
            "links": [],
            "examples":
              [ { "title": "Add an isEmpty filter to a query",
                  "body":
                    [ "let newQuery = query.isEmpty(\"bio\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an isEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .isEmpty(\"bio\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an isEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .isEmpty(\"bio\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "isNotEmpty",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property in which to check for a value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 232 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property has any value.",
            "description":
              [ "The `isNotEmpty()` function refines a `WixDataQuery` or `WixDataFilter` to only match items where the",
                " value of the specified property is not `null` or `undefined`.",
                "",
                " If the property contains any value at all for a given item, including the",
                " empty string or an invalid value, that item will match the query." ],
            "links": [],
            "examples":
              [ { "title": "Add an isNotEmpty filter to a query",
                  "body":
                    [ "let newQuery = query.isNotEmpty(\"bio\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an isNotEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .isNotEmpty(\"bio\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an isNotEmpty filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .isNotEmpty(\"bio\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "le",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 155 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is less than or equal to the specified value.",
            "description":
              [ "The `le()` function refines a `WixDataQuery` or `WixDataFilter` to only match",
                " items where the value of the specified property is less than or equal to the",
                " specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically,",
                "   so `\"ABC\"` and is less than or equal to `\"abc\"` (because of the less than),",
                "   but `\"abc\"` is not less than or equal to `\"ABC\"`.",
                " + Reference: Compares by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a less than or equals filter to a query",
                  "body":
                    [ "let newQuery = query.le(\"age\", 25);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a less than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .le(\"age\", 25)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a less than or equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .le(\"age\", 25)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "limit",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "limit",
              "type": "number",
              "doc": "The number of items to return, which is also the [`pageSize`](wix-data.WixDataQueryResult.html#pageSize) of the results object." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "query.es6",
              "lineno": 254 } ],
        "docs":
          { "summary": "Limits the number of items the query returns.",
            "description":
              [ "The `limit()` function defines the number of results a query returns in each",
                " page. Only one page of results is retreived at a time. The [`next()`](wix-data.WixDataQueryResult.html#next)",
                " and [`prev()`](wix-data.WixDataQueryResult.html#prev) functions are used to",
                " navigate the pages of a query result.",
                "",
                " By default, `limit` is set to `50`.",
                "",
                " The maximum value that `limit()` can accept is `1000`." ],
            "links": [],
            "examples":
              [ { "title": "Add a limit to a query",
                  "body":
                    [ "let newQuery = query.limit(10);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a limit, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a limit, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .eq(\"status\", \"active\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "lt",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type":
                [ "string",
                  "number",
                  "Date" ],
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object with the query definition, based on the supplied parameters." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 195 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value is less than the specified value.",
            "description":
              [ "The `lt()` function refines a `WixDataQuery` or `WixDataFilter` to only match",
                " items where the value of the specified property is less than the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type does not match the same number stored as a Number type.",
                "",
                " If a property contains a number as a String, that value will be compared",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified property are ranked lowest.",
                "",
                " The following types of properties can be compared:",
                "",
                " + Number: Compares numerically.",
                " + Date: Compares JavaScript Date objects.",
                " + String: Compares lexicographically, so `\"Text\"` is less than `\"text\"`.",
                " + Reference: Compares by the ID of the referenced item as a String." ],
            "links": [],
            "examples":
              [ { "title": "Add a less than filter to a query",
                  "body":
                    [ "let newQuery = query.lt(\"age\", 25);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a less than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .lt(\"age\", 25)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a less than filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .lt(\"age\", 25)",
                      "  .eq(\"status\", \"active\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "ne",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with `value`." },
            { "name": "value",
              "type": "any",
              "doc": "The value to match against." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 49 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value does not equal the specified value.",
            "description":
              [ "The `ne()` function refines a `WixDataQuery` or `WixDataFilter` to only",
                " match items where the value of the specified property does not equal the specified `value`.",
                "",
                " It only matches values of the same type. For example, a number value stored",
                " as a String type is considered not equal to the same number stored as a Number type.",
                "",
                " Matching strings with `ne()` is case sensitve, so `\"text\"` is not equal to `\"Text\"`.",
                "",
                " If the value of the `propertyName` property is an Array, `ne()` includes items",
                " in which none of the elements of the Array match the specified `value`." ],
            "links": [],
            "examples":
              [ { "title": "Add a not equals filter to a query",
                  "body":
                    [ "let newQuery = query.ne(\"status\", \"active\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a not equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ne(\"status\", \"active\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a not equals filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ne(\"status\", \"active\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "not",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-data.WixDataQuery",
              "doc": "A query to add to the initial query as a `not` condition." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 561 } ],
        "docs":
          { "summary": "Adds a `not` condition to the query or filter.",
            "description":
              [ "The `not()` function adds a `not` condition to a `WixDataQuery` or `WixDataFilter`. A query or filter with a `not`",
                " returns all the items that match the query or filter as defined up to the `not`",
                " function, but don't match the query or filter passed to the `not` function.",
                "",
                " If the query or filter only contains a `not()` function, it returns all the items",
                " that don't match the query defined by the `not` method.",
                "",
                " The collections referenced by both the initial query and the query passed",
                " to the `not` function must be the same." ],
            "links": [],
            "examples":
              [ { "title": "Add a not to a query",
                  "body":
                    [ "let newQuery = query1.not(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a not, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .gt(\"age\", 25)",
                      "  .not(",
                      "    wixData.query(\"myCollection\")",
                      "      .eq(\"access_type\", \"restricted\")",
                      "  )",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "or",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "query",
              "type": "wix-data.WixDataQuery",
              "doc": "A query to add to the initial query as an `or` condition." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 456 } ],
        "docs":
          { "summary": "Adds an `or` condition to the query or filter.",
            "description":
              [ "The `or()` function adds an inclusive `or` condition to a `WixDataQuery` or `WixDataFilter`. A query or filter",
                " with an `or` returns all the items that match the query or filter as defined up to",
                " the `or` function, the items that match the query or filter passed to the `or`",
                " function, and the items that match both.",
                "",
                " The collections used by both the initial query and the query passed",
                " to the `or` function must be the same.",
                "",
                " If the query or filter only contains an `or()` function, it returns all the items in the collection." ],
            "links": [],
            "examples":
              [ { "title": "Add an or to a query",
                  "body":
                    [ "let newQuery = query1.or(query2);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an or, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .lt(\"age\", 25)",
                      "  .or(",
                      "    wixData.query(\"myCollection\")",
                      "      .gt(\"age\", 65)",
                      "  )",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );",
                      "",
                      "  /*",
                      "   * For example, results contain items where age is:",
                      "   * 18",
                      "   * 21",
                      "   * 67",
                      "   * 90",
                      "   *",
                      "   * But not items where age is:",
                      "   * 25",
                      "   * 30",
                      "   * 40",
                      "   * 65",
                      "   */" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "skip",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "skip",
              "type": "number",
              "doc": "The number of items to skip in the query results before returning the results." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "query.es6",
              "lineno": 296 } ],
        "docs":
          { "summary": "Sets the number of items to skip before returning query results.",
            "description":
              [ "The `skip()` function defines the number of results to skip in the query",
                " results before returning new query results.",
                "",
                " For example, if you query a collection and 50 items match your query, but",
                " you set `skip` to 10, the results returned will skip the first 10 items",
                " that match and return the 11th through 50th items.",
                "",
                " By default, `skip` is set to 0." ],
            "links": [],
            "examples":
              [ { "title": "Add a skip to a query",
                  "body":
                    [ "let newQuery = query.skip(10);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a skip, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .skip(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a skip, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .eq(\"status\", \"active\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .skip(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "startsWith",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared with the string." },
            { "name": "string",
              "type": "string",
              "doc": "The string to look for at the beginning of the specified property value." } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "filename": "filterMixin.es6",
              "lineno": 297 } ],
        "docs":
          { "summary": "Refines a query or filter to match items whose specified property value starts with a specified string.",
            "description":
              [ "The `startsWith()` function refines a `WixDataQuery` or `WixDataFilter` to",
                " only match items where the value of the specified property starts with the",
                " defined `string`. Matching with `startsWith()` is not case sensitve, so `\"TEXT\"` starts",
                " with `\"tex\"`.",
                "",
                " You can only use `startsWith()` with a property whose value is a String or Reference.",
                " When using a Reference, `startsWith()` matches by the ID of the referenced item as Strings." ],
            "links": [],
            "examples":
              [ { "title": "Add a starts with filter to a query",
                  "body":
                    [ "let newQuery = query.startsWith(\"last_name\", \"M\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a starts with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .startsWith(\"last_name\", \"M\")",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a starts with filter, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .startsWith(\"last_name\", \"M\")",
                      "  .gt(\"age\", 25)",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then( (results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  } )",
                      "  .catch( (error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }