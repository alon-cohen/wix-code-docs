{ "name": "WixDataQueryBuilder",
  "memberOf": "wix-data",
  "mixes": [],
  "labels": [],
  "location":
    { "lineno": 12,
      "filename": "query.es6" },
  "docs":
    { "summary": "Contains functionality for refining a data query.",
      "description":
        [ "The `WixDataQueryBuilder` functions enable you to run, sort, filter, and control",
          " which results a query returns.",
          "",
          " Typically, you build a query using the [`query()`](wix-data.html#query) function,",
          " refine the query by chaining `WixDataQueryBuilder` functions, and then execute the",
          " query by chaining *one* of the following: [`find()`](#find), [`distinct()`](#distinct), or [`count()`](#count)",
          "",
          " For example, the following code queries a collection for all male customers",
          " over the age of 20 and logs the first 15 results to the console, sorted in",
          " ascending order by name:",
          "",
          " ```javascript",
          " import wixData from 'wix-data';",
          "",
          " wixData.query(\"Customer\")",
          "   .gt(\"age\", 20)",
          "   .ascending(\"name\")",
          "   .limit(15)",
          "   .find()",
          "   .then( (results) => {",
          "     console.log(results.items);",
          "   } );",
          " ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "ascending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.",
              "spread": true } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 19,
              "filename": "sortMixin.es6" } ],
        "docs":
          { "summary": "Adds a sort to a query or sort, sorting by the specified properties in ascending order.",
            "description":
              [ "The `ascending()` function refines a `WixDataQuery` or `WixDataSort` to sort in ascending order of\r the specified properties. If you specify more than one property,\r `ascending()` sorts the results in ascending order by each property in the\r order they are listed.\r\r You can sort the following types:\r\r + Number: Sorts numerically.\r + Date: Sorts by date and time.\r + String: Sorts lexicographically, so `\"abc\"` comes after `\"XYZ\"`.\r + Reference: Compares by the ID of the referenced item as a String.\r\r\r If a property contains a number as a String, that value will be sorted\r alphabetically and not numerically. Items that do not have a value for the\r specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add an ascending sort to a query",
                  "body":
                    [ "let newQuery = query.ascending(\"last_name\", \"first_name\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an ascending sort, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an ascending sort, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .eq(\"status\", \"active\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "count",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "number" ] },
            "doc": "Fulfilled - The number of items that match the query.\nRejected - The errors that caused the rejection." },
        "locations":
          [ { "lineno": 75,
              "filename": "query.es6" } ],
        "docs":
          { "summary": "Returns the number of items that match the query.",
            "description":
              [ "The `count()` function returns a Promise that resolves to the number of",
                " items that match the query. The Promise is rejected if `count()` is called",
                " with incorrect permissions or if any of the functions used to refine the",
                " query is invalid.",
                "",
                " Calling the `count()` function triggers the [`beforeCount()`](wix-data.Hooks.html#beforeCount)",
                " and [`afterCount()`](wix-data.Hooks.html#afterCount) hooks if they have been defined.",
                "",
                " Use the `options` parameter to run `count()` without checking for permissions",
                " or without its registered hooks.",
                "",
                " Any function that does not filter query results (e.g., [`ascending()`](#ascending))",
                " does not affect the result of `count()`.",
                "",
                " If you build a query and don't refine it with any `WixDataQueryBuilder` functions,",
                " `count()` returns the total number of items in the collection.",
                "",
                " If you have already run a query with [`find()`](#find), you can retrieve",
                " the number of query results without calling `count()`. The [`find()`](#find)",
                " function returns a Promise that resolves to a [`WixDataQueryResult`](wix-data.WixDataQueryResult)",
                " object, which has a `totalCount` property whose value is the number of results." ],
            "links": [],
            "examples":
              [ { "title": "Perform a count on a query",
                  "body":
                    [ "query.count()\r",
                      "  .then( (num) => {\r",
                      "    let numberOfItems = num;\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query and perform a count on it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .count()\r",
                      "  .then( (num) => {\r",
                      "    let numberOfItems = num;\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query and perform a count on it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .eq(\"status\", \"active\")\r",
                      "  .gt(\"age\", 25)\r",
                      "  .count()\r",
                      "  .then( (num) => {\r",
                      "    let numberOfItems = num;\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "descending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.",
              "spread": true } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 53,
              "filename": "sortMixin.es6" } ],
        "docs":
          { "summary": "Adds a sort to a query or sort, sorting by the specified properties in descending order.",
            "description":
              [ "The `descending()` function refines a `WixDataQuery` or `WixDataSort` to sort in descending order of\r the specified properties. If you specify more than one property,\r `descending()` sorts the results in descending order by each property in the\r order they are listed.\r\r You can sort the following types:\r\r + Number: Sorts numerically.\r + Date: Sorts by date and time.\r + String: Sorts lexicographically, so `\"abc\"` comes before `\"XYZ\"`.\r + Reference: Compares by the ID of the referenced item as a String.\r\r\r If a property contains a number as a String, that value will be sorted\r alphabetically and not numerically. Items that do not have a value for the\r specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add an descending sort to a query",
                  "body":
                    [ "let newQuery = query.descending(\"last_name\", \"first_name\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an descending sort, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .descending(\"last_name\", \"first_name\")\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an descending sort, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .descending(\"last_name\", \"first_name\")\r",
                      "  .eq(\"status\", \"active\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "distinct",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The property whose value will be compared for distinct values." },
            { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataQueryResult" ] },
            "doc": "Fulfilled - A Promise that resolves to the results of the query.\nRejected - Error that caused the query to fail." },
        "locations":
          [ { "lineno": 118,
              "filename": "query.es6" } ],
        "docs":
          { "summary": "Returns the distinct values that match the query, without duplicates.",
            "description":
              [ "The `distinct()` function returns a Promise that resolves to:",
                "",
                " + The distinct values found in the specified field when running the query.",
                " + Additional information about the results, such as the number of values that match the query.",
                "",
                "",
                " Unlike `find()`, which returns all item objects that match the query, `distinct()` returns matching field values, and eliminates",
                " duplicate field values from the query result. You cannot use `find()` and `distinct()` together.",
                "",
                " For an item to be resolved as distinct, only the specified field must be distinct. Other fields for that item in the",
                " collection are not evaluated when resolving the promise.",
                "",
                " The Promise is rejected if `distinct()` is called with incorrect permissions or if any of the",
                " functions used to refine the query is invalid.",
                "",
                " Use the `options` parameter with the `suppressAuth` property to run `distinct()` without checking for permissions." ],
            "links": [],
            "examples":
              [ { "title": "Get distinct values from a query",
                  "body":
                    [ "query.distinct(\"state\")\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to run a `distinct()` on a `query()` that was previously built and stored in a variable." } },
                { "title": "Create a distinct query and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .distinct(\"state\")\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to build a `query()` and then run `distinct()` on it." } },
                { "title": "Create a query, add functions to the query, and find distinct values",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .eq(\"status\", \"active\")\r",
                      "  .gt(\"age\", 25)\r",
                      "  .distinct(\"state\")\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to build a `query()`, chain additional functions such as `eq()` and `gt()` to the query, and then run the `distinct()`." } },
                { "title": "Create a distinct query with options and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "let options = {\r",
                      "    \"suppressAuth\": true\r",
                      "};\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .distinct(\"state\", options)\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to build a `query()` and then run `distinct()` bypassing permission checks.\n  Note that the `options` parameter can only be used in backend code." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "find",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "options",
              "type": "wix-data.WixDataOptions",
              "doc": "An object with one or both of the following boolean properties: suppressAuth, suppressHooks.",
              "optional": true } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataQueryResult" ] },
            "doc": "Fulfilled - A Promise that resolves to the results of the query.\nRejected - Error that caused the query to fail." },
        "locations":
          [ { "lineno": 228,
              "filename": "query.es6" } ],
        "docs":
          { "summary": "Returns the items that match the query.",
            "description":
              [ "The `find()` function returns a Promise that resolves to the results found",
                " by the query and some information about the results. The Promise is",
                " rejected if `find()` is called with incorrect permissions or if any of the",
                " functions used to refine the query is invalid.",
                "",
                " Calling the `find()` function triggers the [`beforeQuery()`](wix-data.Hooks.html#beforeQuery)",
                " and [`afterQuery()`](wix-data.Hooks.html#afterQuery) hooks if they have been defined.",
                " If the query being run contains an [`include()`](#include), calling `find()`",
                " triggers [`beforeQuery()`](wix-data.Hooks.html#beforeQuery) and",
                " [`afterQuery()`](wix-data.Hooks.html#afterQuery) hooks for the referenced",
                " collection as well.",
                "",
                " Use the `options` parameter to run `find()` without checking for permissions",
                " or without its registered hooks.",
                "",
                " If you build a query and don't refine it with any `WixDataQueryBuilder` functions,",
                " `find()` returns the entire collection." ],
            "links": [],
            "examples":
              [ { "title": "Perform a find on a query",
                  "body":
                    [ "query.find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to run a `find()` on a `query()` that was previously built and stored in a variable." } },
                { "title": "Create a query and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to build a `query()` and then run a `find()` on it." } },
                { "title": "Create a query, add functions to the query, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .eq(\"status\", \"active\")\r",
                      "  .gt(\"age\", 25)\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if (results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to build a `query()`, chain additional functions such as `eq()` and `gt()` to the query, and then run the `query()`." } },
                { "title": "Create a query with options and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "let options = {\r",
                      "    \"suppressAuth\": true,\r",
                      "    \"suppressHooks\": true\r",
                      "};\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .find(options)\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }    \r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to build a `query()` and then run a `find()` that bypasses permission checks and registered hooks.\n  Note that the `options` parameter can only be used in backend code." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "include",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties for which to include referenced items.",
              "spread": true } ],
        "ret":
          { "type": "wix-data.WixDataQueryBuilder",
            "doc": "A `WixDataQueryBuilder` object representing the query." },
        "locations":
          [ { "lineno": 370,
              "filename": "query.es6" } ],
        "docs":
          { "summary": "Includes referenced items for the specified properties in a query's results.",
            "description":
              [ "The `include()` function refines a query so that the items returned in the",
                " query's results include the full referenced items for the specified properties.",
                "",
                " For example, suppose you have a **books** collection with an **author**",
                " field that references an **authors** collection. Querying the **books**",
                " collection with an `include(\"author\")` returns the relevant book items",
                " and each item will include the full referenced author item in the book's",
                " `author` property.",
                "",
                " When querying a collection that contains a reference field without using the",
                " `include()` function:",
                "",
                " + Single reference field: returned items contain only the ID of the",
                "   referenced item, and not the full referenced items.",
                " + Multiple reference field: returned items do not contain the multiple",
                "   reference field at all.",
                "",
                "",
                " When including a property with multiple references, the following limitations",
                " apply:",
                "",
                " + Only one property with multiple references can be included.",
                " + The query will return an error if more than 50 items are returned, regardless",
                "   of any query limit set using the [`limit()`](#limit) function.",
                " + Each returned item can include up to 50 referenced items. If there are more",
                "   than 50 referenced items, only 50 are returned when the query is run",
                "   and the [`partialIncludes`](wix-data.WixDataQueryResult.html#partialIncludes)",
                "   property of the returned [`WixDataQueryResult`](wix-data.WixDataQueryResult.html)",
                "   is `true`. To retrieve more than 50 referenced items, use the",
                "   [`queryReferenced()`](wix-data.html#queryReferenced) function.",
                "",
                "",
                " For a discussion of when to use the similar [`queryReferenced()`](wix-data.html#queryReferenced) ",
                " function and when to use `include()`, see [Querying Items that Reference Other Items](https://support.wix.com/en/article/including-referenced-data-when-filtering)." ],
            "links": [],
            "examples":
              [ { "title": "Add an include to a query",
                  "body":
                    [ "let newQuery = query.include(\"referenceField\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, include a reference field, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .include(\"referenceField\")\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let firstRefProp = firstItem.referenceField.propertyName;\r",
                      "\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, include a reference field, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"books\")\r",
                      "  .include(\"author\", \"publisher\")\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let books = results.items;\r",
                      "      let firstBook = books[0];\r",
                      "      let firstAuthor = firstBook.author;\r",
                      "      let firstAuthorBio = firstAuthor.bio;\r",
                      "      let firstPublisher = firstBook.publisher.name;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "" ],
                  "extra":
                    { "description": "In this example there is a **books** collection which has two reference fields\n that reference an **authors** collection and a **publishers** collection.\n\n The query includes the **author** and **publisher** properties so that each\n returned book will also include the full items of its referenced author and\n publisher." } },
                { "title": "Create a query, include a reference field, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"books\")\r",
                      "  .eq(\"publisher\", \"00001\")\r",
                      "  .include(\"author\")\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let books = results.items;\r",
                      "      let firstBook = books[0];\r",
                      "      let firstAuthor = firstBook.author;\r",
                      "      let firstAuthorBio = firstAuthor.bio;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );\r",
                      "" ],
                  "extra":
                    { "description": "In this example there is a **books** collection which has two reference fields\n that reference an **authors** collection and a **publishers** collection.\n\n The query is refined to only include books from a specific publisher using\n the `eq()` function and the publisher's ID.\n\n The query also includes the **author** property so that each returned\n book will include the full item of its referenced author." } },
                { "title": "Create a query, include a reference field, and populate a table with the results",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "$w(\"#myTable\").columns = [\r",
                      "  {\r",
                      "    \"id\": \"col1\",\r",
                      "    // 'dataPath' is 'title' field from 'Books' collection\r",
                      "    \"dataPath\": \"title\", \r",
                      "    \"label\": \"Book\",\r",
                      "    \"type\": \"string\"\r",
                      "  }, {\r",
                      "    \"id\": \"col2\",\r",
                      "    // 'datapath' is 'name' field from the collection referenced\r",
                      "    // in the 'author' field \r",
                      "    \"dataPath\": \"author.name\",\r",
                      "    \"label\": \"Author\",\r",
                      "    \"type\": \"string\"\r",
                      "  }\r",
                      "];\r",
                      "\r",
                      "wixData.query(\"books\")\r",
                      "  .include(\"author\")\r",
                      "  .find()\r",
                      "  .then((myResults) => {\r",
                      "    if(myResults.items.length > 0) {\r",
                      "      $w(\"#myTable\").rows = myResults.items;\r",
                      "    }\r",
                      "    else {\r",
                      "      console.log(\"No results found.\");\r",
                      "    }\r",
                      "  } );\r",
                      "" ],
                  "extra":
                    { "description": "In this example there is a **books** collection which has one reference field,\n **author**, that references an **authors** collection.\n\n The columns of a table are set to show information from both the **books**\n collection and the referenced **authors** collection.\n\n The query includes the **author** property so that each returned\n book will include the full item of its referenced author." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "limit",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "limit",
              "type": "number",
              "doc": "The number of items to return, which is also the [`pageSize`](wix-data.WixDataQueryResult.html#pageSize) of the results object." } ],
        "ret":
          { "type": "wix-data.WixDataQueryBuilder",
            "doc": "A `WixDataQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 285,
              "filename": "query.es6" } ],
        "docs":
          { "summary": "Limits the number of items the query returns.",
            "description":
              [ "The `limit()` function defines the number of results a query returns in each",
                " page. Only one page of results is retrieved at a time. The [`next()`](wix-data.WixDataQueryResult.html#next)",
                " and [`prev()`](wix-data.WixDataQueryResult.html#prev) functions are used to",
                " navigate the pages of a query result.",
                "",
                " By default, `limit` is set to `50`.",
                "",
                " The maximum value that `limit()` can accept is `1000`.",
                "",
                " Note that for some Wix app collections, the maximum value `limit()` can accept is",
                " less than `1000`. For example, the maximum limit for the Wix `Stores/Product` collection is 100." ],
            "links": [],
            "examples":
              [ { "title": "Add a limit to a query",
                  "body":
                    [ "let newQuery = query.limit(10);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a limit, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a limit, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .eq(\"status\", \"active\")\r",
                      "  .gt(\"age\", 25)\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .limit(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Iterate through all pages of query results",
                  "body":
                    [ "async function retrieveAllItems(phrase){\r",
                      "  let allItems = [];\r",
                      "\r",
                      "  let results = await wixData.query(\"myCollection\")\r",
                      "    .limit(1000)\r",
                      "    .find();\r",
                      "\r",
                      "  allItems.push(results.items);\r",
                      "\r",
                      "  while(results.hasNext()) {\r",
                      "    results = await results.next();\r",
                      "    allItems.push(results.items);\r",
                      "  }\r",
                      "  return allItems;\r",
                      "}\r",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to get all query results, bypassing the maximum limit of 1000." } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "skip",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "skip",
              "type": "number",
              "doc": "The number of items to skip in the query results before returning the results." } ],
        "ret":
          { "type": "wix-data.WixDataQueryBuilder",
            "doc": "A `WixDataQueryBuilder` object representing the refined query." },
        "locations":
          [ { "lineno": 330,
              "filename": "query.es6" } ],
        "docs":
          { "summary": "Sets the number of items to skip before returning query results.",
            "description":
              [ "The `skip()` function defines the number of results to skip in the query",
                " results before returning new query results.",
                "",
                " For example, if you query a collection and 50 items match your query, but",
                " you set `skip` to 10, the results returned will skip the first 10 items",
                " that match and return the 11th through 50th items.",
                "",
                " By default, `skip` is set to 0." ],
            "links": [],
            "examples":
              [ { "title": "Add a skip to a query",
                  "body":
                    [ "let newQuery = query.skip(10);" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a skip, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .skip(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add a skip, and run it",
                  "body":
                    [ "import wixData from 'wix-data';\r",
                      "\r",
                      "// ...\r",
                      "\r",
                      "wixData.query(\"myCollection\")\r",
                      "  .eq(\"status\", \"active\")\r",
                      "  .gt(\"age\", 25)\r",
                      "  .ascending(\"last_name\", \"first_name\")\r",
                      "  .skip(10)\r",
                      "  .find()\r",
                      "  .then( (results) => {\r",
                      "    if(results.items.length > 0) {\r",
                      "      let items = results.items;\r",
                      "      let firstItem = items[0];\r",
                      "      let totalCount = results.totalCount;\r",
                      "      let pageSize = results.pageSize;\r",
                      "      let currentPage = results.currentPage;\r",
                      "      let totalPages = results.totalPages;\r",
                      "      let hasNext = results.hasNext();\r",
                      "      let hasPrev = results.hasPrev();\r",
                      "      let length = results.length;\r",
                      "      let query = results.query;\r",
                      "    } else {\r",
                      "      // handle case where no matching items found\r",
                      "    }\r",
                      "  } )\r",
                      "  .catch( (error) => {\r",
                      "    let errorMsg = error.message;\r",
                      "    let code = error.code;\r",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }