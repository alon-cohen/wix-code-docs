{ "name": "wix-captcha-backend",
  "mixes": [],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 23,
      "filename": "authorise-token.js" },
  "docs":
    { "summary": "The wix-captcha-backend module contains functionality for working with\n the captcha element from backend code.",
      "description":
        [ "The captcha element allows you to present a challenge-response test",
          " to site visitors to determine whether they are human or a bot. Use the captcha",
          " element to verify that site visitors are human before allowing them perform",
          " restricted operations.",
          "",
          " For more information on working with your captcha element, click here (link to tutorial).",
          "",
          " To use the Captcha API, import `wixCaptcha` from the `wix-captcha-backend` module:",
          "",
          "   ```javascript",
          "   import wixCaptcha from 'wix-captcha-backend';",
          "   ```" ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "authorize",
        "labels":
          [ "changed" ],
        "nameParams": [],
        "params":
          [ { "name": "token",
              "type": "string",
              "doc": "The captcha token to authorize." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-captcha-backend.SuccessReport" ] },
            "doc": "Fulfilled - A success message.\nRejected - An error message." },
        "locations":
          [ { "lineno": 109,
              "filename": "authorise-token.js" } ],
        "docs":
          { "summary": "Authorizes the captcha token.",
            "description":
              [ "Following Captcha verification on the client side, you must authorize",
                " the generated captcha token in the backend. `authorize()` checks if the token",
                " is valid, making sure it was not tampered with or timed out.",
                "",
                " The `authorize()` function returns a Promise that resolves to a [`Success`](wix-captcha-backend.html#SuccessReport)",
                " object when the token is authorized and to an [`Error`](wix-captcha-backend.html#ErrorReport)",
                " object when authorization fails.",
                "",
                " To understand how `authorize()` is used in a typical Captcha validation lifecycle,",
                " click [`here`]($w.Captcha.html#captcha-lifecycle)." ],
            "links":
              [ "[Captcha( )]($w.captcha.html)" ],
            "examples":
              [ { "title": "Full captcha lifecycle scenario",
                  "body":
                    [ "/******************************",
                      " * backend code - captcha.jsw *",
                      " ******************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from 'wix-data';",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequest) {",
                      "  return wixCaptcha.authorize(submitRequest.token)",
                      "    .then (() => {",
                      "      return wixData.insert(\"MyCollection\", submitRequest.data);",
                      "    });",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/captcha';",
                      "",
                      "$w.onReady(function () {",
                      "  // When user clicks submit button",
                      "  $w(\"#submitDataButton\").onClick(() =>",
                      "    let submitRequest = {",
                      "      token: $w(\"#myCaptcha\").token,",
                      "      data: $w(\"#myInput\").value,",
                      "    }",
                      "    processSubmission(submitRequest) // Call backend function",
                      "      .then( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Data successfully submitted\";",
                      "        $w(\"#messageText\").show;",
                      "      })",
                      "      .catch( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Something went wrong. Redo the captcha challenge.\";",
                      "        $w(\"#messageText\").show;",
                      "      })",
                      "  }",
                      "",
                      "  // Error handler",
                      "  $w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#myCaptcha\").reset();",
                      "    $w(\"#messageText\").text = \"Something went wrong. Redo the captcha challenge.\";",
                      "    $w(\"#messageText\").show;",
                      "  })",
                      "",
                      "  // Verification handler",
                      "  $w(\"#myCaptcha\").onVerified(() => {",
                      "    $w(\"#submitDataButton\").enable();",
                      "    $w(\"#messageText\").hide();",
                      "  })",
                      "",
                      "  // Timeout handler",
                      "  $w(\"#myCaptcha\").onTimeout(() => {",
                      "    $w(\"#submitDataButton\").disable();",
                      "  })",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to use captcha to protect a data insertion.\n We use a text input for the data, a captcha element, and a submit button.\n The submit button is disabled until the site visitor completes the captcha\n challenge and the captcha is verified. Clicking the submit button triggers\n backend authorization of the token. If authorization is successful, the data\n is inserted into the collection." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages":
    [ { "name": "ErrorReport",
        "locations":
          [ { "lineno": 52,
              "filename": "authorise-token.js" } ],
        "docs":
          { "summary": "An object representing a captcha authorization error message.",
            "description":
              [ "If captcha token authorization fails, an error message containing a status",
                " code is returned. The following table lists the possible HTTP error status",
                " codes, based on <a href=\"https://tools.ietf.org/html/rfc2616#section-10\" target=\"_blank\">RFC 2616</a>:",
                "",
                "<table style=\"border-collapse: collapse;\">",
                "  <tr>",
                "    <td><b>Status Code</b></td>",
                "    <td><b>Name</b></td>",
                "    <td><b>Description</b></td>",
                "  </tr>",
                "  <tr>",
                "    <td>400</td>",
                "    <td>Bad Request</td>",
                "    <td>The request could not be understood by the server. This could occur for a number of reasons, such as:",
                "    <p>",
                "    <ul>",
                "    <li>The request was sent without a token.",
                "    <li>The token is invalid.",
                "    <li>The token has timed out.",
                "    </li>",
                "    </ul>",
                "    </td>",
                "  </tr>",
                "  <tr>",
                "    <td>401</td>",
                "    <td>Unauthorized/Unauthenticated</td>",
                "    <td>No user identity found in passed request.</td>",
                "  </tr>",
                "  <tr>",
                "    <td>500</td>",
                "    <td>Internal Server Error</td>",
                "    <td>The server encountered an unexpected condition, such as a missing or invalid private captcha key.</td>",
                "  </tr>",
                "  <tr>",
                "    <td>503</td>",
                "    <td>Unavailable</td>",
                "    <td>The service is unavailable due to 1 of the following:",
                "    <p>",
                "    <ul>",
                "    <li>Throttled error: Server overload due to more than the allowed requests in a given time frame.",
                "    <li>Request failed: No response following 10 retries with a 1 second interval.",
                "    </li>",
                "    </ul>",
                "    </td>",
                "  </tr>",
                "</table>" ],
            "links":
              [ "[authorize( )](wix-captcha-backend.html#authorize)" ],
            "examples":
              [ { "title": "Authorization fails and returns an error",
                  "body":
                    [ "/******************************",
                      " * backend code - captcha.jsw *",
                      " ******************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "",
                      "export function captchaAuthorize(token) {",
                      "  return wixCaptcha.authorize(token);",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {captchaAuthorize} from 'backend/captcha';",
                      "",
                      "export function myButton_click(event, $w) {",
                      "  let myToken = $w(\"#myCaptcha\").token",
                      "",
                      "  captchaAuthorize(myToken)",
                      "    .then( (result) => {",
                      "      console.log (result);",
                      "    })",
                      "    .catch((error) => {",
                      "      console.log (error); // Request failed with status code 400",
                      "      $w(\"#myCaptcha\").reset();",
                      "      $w(\"#messageText\").text = \"Something went wrong. Redo the captcha challenge.\";",
                      "      $w(\"#messageText\").show;",
                      "    })",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "error",
              "type": "string",
              "doc": "Error message." } ],
        "extra":
          {  },
        "labels":
          [ "new" ] },
      { "name": "SuccessReport",
        "locations":
          [ { "lineno": 43,
              "filename": "authorise-token.js" } ],
        "docs":
          { "summary": "An object representing a captcha authorization success message.",
            "links":
              [ "[authorize( )](wix-captcha-backend.html#authorize)" ],
            "examples":
              [ { "title": "Authorize captcha token and show result",
                  "body":
                    [ "/******************************",
                      " * backend code - captcha.jsw *",
                      " ******************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "",
                      "export function captchaAuthorize(token) {",
                      "  return wixCaptcha.authorize(token);",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {captchaAuthorize} from 'backend/captcha';",
                      "",
                      "export function myButton_click(event, $w) {",
                      "  let myToken = $w(\"#myCaptcha\").token",
                      "",
                      "  captchaAuthorize(myToken)",
                      "    .then( (result) => {",
                      "      console.log (result); // {success: true}",
                      "    })",
                      "    .catch(() => {",
                      "      $w(\"#myCaptcha\").reset();",
                      "      $w(\"#messageText\").text = \"Something went wrong. Redo the captcha challenge.\";",
                      "      $w(\"#messageText\").show;",
                      "    })",
                      "}" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "members":
          [ { "name": "success",
              "type": "boolean",
              "doc": "Value is `true` when authorization is successful." } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] } ],
  "extra":
    {  } }